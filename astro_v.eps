%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 10.0%%For: (Swinburne Press) (Swinburne Press)%%Title: (astro_v.eps)%%CreationDate: 17/10/03 11:36 AM%%BoundingBox: 228 255 377 552%%HiResBoundingBox: 228.3008 255.7241 376.1992 551.2764%%DocumentProcessColors: Black%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset AGM_Gradient 1.0 0%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Color%AI7_ImageSettings: 0%%DocumentCustomColors: (PANTONE 485 CV)%%CMYKCustomColor: 0 1 0.91 0 (PANTONE 485 CV)%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 -1 -1 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 31 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 1%AI5_ArtFlags: 1 0 0 1 0 0 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: 34 492 1 918 462 18 0 1 7 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:30 31%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -31 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%AI9_Flatten: 1%AI7_Thumbnail: 64 128 8%%BeginData: 9900 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCF8FD0DF8277D527D5252FD38F8277DFFFFA87DFFFF7DF87D52%7DFD05F87D527DFD07F8525252F8F8F827527DFD0AF8277D27FD0EF8A8FF%7D27F8F8F85252F852FFA8FD05F852FFFFFD07F8A8FF27FD04F8FFFFA8FD%09F87DFF52FD0DF827FFA8FD08F827A8FFFD06F8A8FF27FD06F8FF7DFD05%F8FFFFFFA8FD08F827FF27FD0DF87DFFA8FD09F87DFF7DFD05F87DFFA8FD%05F852FF52FD05F8FFA8FFFF7DFD07F852FF52FD0DF852FFA827FD08F827%FFA8FD05F87DFFFF27FD04F87DFFFD06F8FFA827FFFF7DFD06F827FF27FD%0DF827FFFFA852FD08F8A8FF27FD04F8FFFFFF52FD04F8FF7DF852FF52F8%F8FFA8F852FFFF52FD05F852FF52FD0EF852A8FFFF7DFD07F87DFF7DF8F8%F852FF7DFFA8F8F8F852FF52F827FF27F8F8FFA8F8F827FFFF52FD04F827%FF27FD0FF827A8FFFFFF5227FD04F827FFFFF8F8F8A8FFF8FFFF27F8F8A8%FFF8F827FF27F8F8FFA8F8F8F852FFFF27F8F8F852FF52FD11F827FFFFFF%A827FD04F87DFF27F8F8FF52F87DFF52F8F8FF52F8F827FF27F8F8FFA8FD%04F87DFFA827F8F827FF27FD13F87DFFFFFF52F8F8F852FFA8F87DFF27F8%52FFFFF87DFF27F8F827FF27F8F8FFA8FD05F87DFFA827F852FF52FD14F8%27A8FF7DFD04F8FFFFF8A8A8F8F8F8FFFF27A8FFF8F8F827FF27F8F8FFA8%FD06F8A8FFA8F827FF27FD15F87DFFFFFD04F87DFF7DFF52F8F8F852FF7D%FF52F8F8F827FF27F8F8FFA8FD06F827A8FF7D52FF52FD15F852FFFFFD04%F852FFFFFF27F8F8F827FFFFFF27F8F8F827FF27F8F8FFA8FD08F8A8FFA8%FF27FD15F8A8FFA8FD05F8FFFFA8FD05F8A8FFA8FD04F827FF27F8F8FFA8%FD08F827A8FFFF52FD0EF852FD05F87DFFFF27FD05F852FF27FD05F827FF%52FD04F827FF27F8F8FFA8FD09F827A8FF27FD0DF852FFFFA8A8A8FFFFFF%52FD06F827FFFD06F827FF27FD04F827FF52F8F8FFA8FD0AF852FF52FD0E%F852527D527D5252FD09F852FD07F827FD05F8272727F8F82727FD0BF852%27FD70F8FD0527FD1FF852FD05FFA852FD04F8A8FF27FD07F87DFF7DF8F8%52FD06FF7D27FD1CF827FFA8272752FFFF27F8F8F8A8FF27FD07F87DFF7D%F8F827FFA827F852A8FF7DFD1CF827FFA8F8F8F852FF7DF8F8F8A8FF27FD%07F852FF52F8F8F8FFA8F8F8F827FFFFFD1CF827FFA8FD04F8FFFFF8F8F8%A8FF27FD07F87DFF7DF8F8F8FF7DFD04F8A8FF27FD1BF827FFA8FD04F8FF%A8F8F8F8A8FF27FD07F852FF52F8F8F8FFA8FD04F8A8FFFD1CF827FFA8F8%F8F87DFF7DF8F8F8A8FF27FD07F87DFF7DF8F8F8FF7DF8F8F852FF7DFD1C%F827FFA87D52A8FF7DFD04F8A8FF27FD07F852FF52F8F8F8FFFF527DA8FF%A827FD1CF827FFFF7DA8FFFFA827F8F8F8A8FF27FD07F87DFF7DF8F8F8FF%7DA8FFA827FD1EF827FFA8F8F8F852FFFF52F8F8A8FF27FD07F852FF52F8%F8F8FFA8F8FFFF52FD1EF827FFA8FD04F852FF7DF8F8A8FF27FD07F87DFF%7DF8F8F8FF7DF827FFA827FD1DF827FFA8FD04F827FFFFF8F8A8FF27FD07%F852FF52F8F8F8FFA8F8F852FFA827FD1CF827FFA8FD05F8FFFFF8F87DFF%52FD07F8A8FF52F8F8F8FF7DF8F8F87DFF7DFD1CF827FFA8FD04F852FFA8%F8F852FFA827FD05F827FFFFFD04F8FFA8F8F8F827A8FF52FD1BF827FFA8%F8F8F827A8FF27F8F8F8A8FFA827F8F8F827A8FF7DFD04F8FF7DFD04F827%FFFF27FD1AF827FFA87D52A8FFFF7DFD04F827A8FFFFA8A8A8FFFF7DFD04%F852FFFFFD05F87DFFFF27FD19F8527DA87DA87D7DFD08F827A8A8FFA87D%27FD05F827A87DFD06F87D7D7DFD9EF827A8A852FD09F827A852F8F827FD%07A87DFD26F8A8FFFF27FD08F827FF7DF8F8F8FFFF7D527D52A87DFD26F8%A8FFFFFF52FD08F8FF52F8F8F8FFFFFD2CF8A87D7DFFFF27FD07F8FF7DF8%F8F8FFFFFD2CF8A8A8F87DFFFF27FD06F8FF52F8F8F8FFFFFD22F8A8527D%27FD06F8A87DF8F8A8FFA8FD06F8FF7DF8F8F8FFFFFD0CF85252527DFD12%F8FFA8FFA8FD06F8A8A8F8F8F8FFFFA8FD05F8FF52F8F8F8FFFF527D527D%5252FD06F852FFA8FFFD11F827FFFFFFA827FD05F8A87DFD04F8FFFF7DFD%04F8FF7DF8F8F8FD07FF7DFD06F8A8FFFFA852FD10F87DA8FFA8FF27FD05%F8A8A8FD04F827FFFF7DF8F8F8FF52F8F8F8FFFFFD05F827FD05F827FFA8%FFFF7DFD12F8A8A8FD07F8A87DFD06F8FFFF52F8F8FF7DF8F8F8FFFFFD0D%F87DFFFD14F827FD08F8A8A8FD06F827FFFF52F8FF52F8F8F8FFFFFD2CF8%A87DFD07F852FFA827FF7DF8F8F8FFFFFD2CF8A8A8FD08F852FFA8FF52F8%F8F8FFFFFD2CF8A87DFD09F87DFFFF7DF8F8F8FFFFFD2CF8A8FFFD0AF87D%FF52F8F8F8FFFF527D527D527D7D7DFD24F8A8FF27FD0AF87D7DF8F8F8FD%09FFFD32F82727FDFCF8FD62F8B0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB5BCBBB5BCB5BC%B4B0FCFD04BCC2BCB0FCC2BCB5FCC2BCB5FCC2BBB0B5BCFCB0FCB0FCB0FC%B0FCB0FCB0FCB0FCB0FD10FCBBCAC3A1C3C3C2A1CFFCBCA1C3CAC2A1CAC3%B5A8C3B5FCCAC2B5CACAFFC3CAA1C3FD10FCB0FCB0FCB0FCB0FCB0FCB0FC%B0FCB0C9BBFCB0C3CFC2CABCCABCC9FCFFFCC9CFC2FCFFC9BBFCFFC9C9CA%B5B5FFCAFFB5B0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD10FCCAB5FCFCC3BB%B5C3FCC2CFC2FCCAFCC2FFBCFCC3B5FCFCCAFCC2CAFCC2FFCAC9BCFD10FC%B0FCB0FCB0FCB0FCB0FCB0FCB0FCB0B5CFC2CAC3C9C2CAFCB0C9C3FCFFFC%C3BCFFBCCFBCBCFCCFFCB5CAFFFFC3CAB5CABCFCB0FCB0FCB0FCB0FCB0FC%B0FCB0FD11FC8CBCBBB599BCB5B5FCFCB5FC99FCB5B58CBCBBBC92FCB5FC%FCFCBBB5FCBBFCB592FD0FFCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FC%B0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FC%B0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCC2CAB0FCFD04%CAFFC9FFCAB5C3FFFFC9C3FFBCFFFCB0CAFFB5CAC2CAC9C9BCC9CACFB5CA%CAB0FCB0C2CAFCC9C9B0FCCAFFCAC9BBFCB0FCB0FD07FCA7CAB5BCA7B5FC%BCA0FCCACA9AFFB5B5CACAC2CACABCBBCA93FFC3C3A1FCC2C3A1FCFCB5CA%B5FCFCFCCFCAB5A0CFC3FCA1CFFCB5A1FD05FCB0FCB0FCB0B5FFCACAFCC2%CAB5BCC9FCFFCAC2CFB5FCCFCACFFCFFBCC2CAB0CAB5FCC9C9C3C9C3FCB0%FCC2CFB5FCBCCAFFC3C9BCCABCCACAB0FCFFFCB0FCB0FD06FCCAB5FCCABB%B5CABBBCC2FCCAC3C3CFCACACAC3BBFCCAFCFCCAFCCFFCBBBBCAC3C2C9BC%B5BCB5CABBFCCAB5FCCFC2BCFCCAC3FFB5C9BBFD05FCB0FCB0FCB0C3B0FC%BCC3C9FCB0BCBCFCC3FCC9B5C3C2B5BBBBFCC3FCB0C2B0C2B0C2C9FCBCB5%B5C3C9BCC9B5B0FCC3FCB0C3C2B5B0FCC3C3C9BBB0FCB0FCB0FD41FCB0FC%B0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FC%B0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FC%B0FD08FCC2CABCBCFCBCC9CABBC3CABCC9C9B5FCCAC9C9B5CACABCFCCAFC%FCC9BCCAC9B5C2FCC2C3CAC9CAC9C3BCFCB5C2BBCACABBFD08FCB0FCB0FC%B0FCBCCAB0BCC9FCC3C9C3CACFFCB0CAC9C3CAB5B0FCFFC9C2FFC3FFBCB5%FFBCCFC3CAC3B0C2C2BCC3FCFFC9CFBCB0CACFFCB0FCB0FCB0FCB0FCB0FD%08FCC3CABCA0FCC2CACABBCAC999CFCAB5CAFCFCBCCAFCFCCAA1C3C3CAA0%C2CAC999C3FCC399BCC2FCCACAFCCA93CAC2FC8CCAFD08FCB0FCB0FCB0FC%B0FCCAC3CFBBCFC3C2FCFFFCB0CAC2C9CFBBB0B5FFC9C9FFC3BCFFC9C2C3%FFFCBBCABCCAB5BCC3FCFFC9B0FCCFCACFFCB0CAB0FCB0FCB0FCB0FD07FC%B5FFBCFCFCCAFCC2B5FCC3CACACAFCC3C2CACAC9B5CAC9BCBCBCBBBCB5CA%C9FCFCB5C9B5FCBCBCFCC3C3B5FCB5C2B5CACAC2FD08FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FD41FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FD41FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0FCB0%FCB0FCB0FCB0FCB0FD40FCFC%%EndData%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient_Sep 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient_Sep 5 dict dup begin put/AGM_Gradient_Sep_private 100 dict def/initialize{	AGM_Gradient_Sep begin	AGM_Gradient_Sep_private begin	_compositeJob{		initializeSinglePassSeps	}{		initializeMultiPassSeps	}ifelse	initializeSeps	AGM_Gradient_private begin		/_fillSD newSpotDict def		/_rampSD newSpotDict def		/_nCustomColorSD nd end	AGM_Gradient_Sep_private 	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient_Sep	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop	 end}def/terminate{	currentdict AGM_Gradient_Sep eq{	 end	}if}defAGM_Gradient_Sep_private begin/initializeSeps{	/currentoverprint { _of } def	_noImage not _level2PS not and{		/linealFill{			currentoverprint{				0 0 1 1 rectfill			}{				mySave				8 setImageParms				_color{					_nCustomColorSD begin						cyan magenta yellow black							_spotColor{							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put						}if				 end						4{						makeByte8 4 1 roll					}repeat					true 4 _nCustomColorSD ncolorimage				}{					_nCustomColorSD/black get 1 exch sub makeByte8 					_nCustomColorSD bwImage				}ifelse				myRestore			}ifelse		}def	}if	/_whiteBytes 1 makeByte8 pt	 /knockOut{		_noImage _level2PS or currentoverprint or{			gsave			false setoverprint			1 setgray 			0 0 1 1 rectfill			grestore		}{			8 setImageParms _whiteBytes /_image load 5 execImage		}ifelse	}def	/newSpotDict{		11 dict dup begin			/nSpots 2 def			/spot1 7 dict def			/spot2 7 dict def	 end	}def	/initSpotData	{	 begin			/name nd			/tintImage nd			/tintValue nd			/spot_C nd			/spot_M nd			/spot_Y nd			/spot_K nd	 end	}def	/initSpotDict{	 begin			/cyanInk nd			/magentaInk nd			/yellowInk nd			/blackInk nd			/cyan nd			/magenta nd			/yellow nd			/black nd			spot1 initSpotData			spot2 initSpotData	 end	}def	/copySpotDict{		/_dst xp	 begin			cyanInk magentaInk yellowInk blackInk			cyan magenta yellow black			spot1 spot2	 end		_dst begin			/spot1 spot1 maxlength dict def			/spot2 spot2 maxlength dict def			spot2 copy pop			spot1 copy pop			/black xd			/yellow xd			/magenta xd			/cyan xd			/blackInk xd			/yellowInk xd			/magentaInk xd			/cyanInk xd	 end	}def	/setCustomColor	{		1 index /Black eq{			6 1 roll 5 npop			1 exch sub			setgray		}{			6 1 roll _ccAry1 astore exch			dup null eq{				pop 0			}if			setcustomcolor		}ifelse	}def	/setCStop{		/_colorStyle exch pt				_colorStyle 0 eq{			0 0 0			4 -1 roll			1 exch sub			_spotColor{				/_colorStyle 3 pt				/Black				1 index				1 exch sub			}if		}if		_colorStyle 2 eq{			3 npop		}if		_rampSD _fillSD copySpotDict				_colorStyle 4 eq{ 			pop			9 2 roll 3 npop 6 -2 roll		} if				_colorStyle 3 eq _colorStyle 4 eq or{ 								_fillSD begin				/_spot1 spot1 pt				/_spot2 spot2 pt		 end						exch dup _spot1/name get eq{				_spot1 _spot2			}{				_spot2 _spot1			}ifelse		 begin			 begin					/name xd					1 exch sub /tintValue xd					4{						tintValue mul 4 1 roll					}repeat					_spotColor not{						/tintValue null def					}if			 end				/tintValue 0 def		 end		}if		_fillSD nsetcustomcolor	}def	/renderCMYK{		spot1/name get null eq		spot2/name get null eq and		dup not{			pop			spot1 spotConverted		}if		dup not{			pop			spot2 spotConverted		}if	}def	/currentInk{		true		_inRipSep{			currentcolorspace 0 get			dup /DeviceGray eq			1 index /DeviceCMYK eq or{				pop				currentcmykcolor add add add 0 eq{					pop false				}if			}{				/Separation eq{					currentcolor 0 eq{						pop false					}if				}if			}ifelse		}{			currentgray 1 eq{				pop false			}if		}ifelse	}def	/currentInkN{			_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end		{			currentInk		}{			gsave			_spot1 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			_spot2 begin				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					currentInk				}{					false				}ifelse		 end			grestore						or		} ifelse	}def	/fill_ /fill load def	/fillOvp{		currentoverprint{			_inRipSep{				currentcolorspace 0 get				dup /DeviceGray eq				1 index /DeviceCMYK eq or{					pop					currentcmykcolor add add add 0 eq{						newpath					}if				}{					/Separation eq{						currentcolor 0 eq{							newpath						}if					}if				}ifelse			}{				currentgray 1 eq{					newpath				}if			}ifelse		}if		fill_	}def	/fill{		_nCustomColorSD begin			/_spot1 spot1 pt			/_spot2 spot2 pt			renderCMYK	 end				{			fillOvp		}{			_spot1 begin				gsave				name null ne{					spot_C spot_M spot_Y spot_K name tintValue setCustomColor				}{					1 setgray				}ifelse				fillOvp 				grestore		 end			_spot2 begin				name null ne{					gsave					true setoverprint					spot_C spot_M spot_Y spot_K name tintValue setCustomColor					fillOvp					grestore				}if		 end			newpath		}ifelse	}def	/expandSpot{		_spotColor{			/_len xp			_rampSD begin				spot1 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end				spot2 begin					tintImage null ne{						tintImage _len expandOne /tintImage xd					}if			 end		 end		}{			pop		}ifelse	}def	/rampImage{		currentoverprint{			rectImage		}{			_enabledSmoothShade{				fillRamp			}{				_color{					_rampSD begin						/cyanInk _cyanData 0 ne def						/magentaInk _magentaData 0 ne def						/yellowInk _yellowData 0 ne def						/blackInk _blackData 0 ne def				 end										_nSamples setImageParms					_nSamples expandSpot					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 _rampSD ncolorimage				}{					_rampSD begin						/cyanInk false def						/magentaInk false def						/yellowInk false def						/blackInk true def				 end					_nSamples setImageParms 					_blackData _rampSD bwImage				}ifelse			}ifelse		}ifelse	}def	/nsetcustomcolor where{		pop	}{		/nsetcustomcolor		{			/_nCustomColorSD xp			_nCustomColorSD begin				4 copy				/black xd				/yellow xd				/magenta xd				/cyan xd				4 copy				0 ne /blackInk xd				0 ne /yellowInk xd				0 ne /magentaInk xd				0 ne /cyanInk xd		 end			setcmykcolor		}def	}ifelse	/nsetcustomcolorend where{		pop	}{		/nsetcustomcolorend		{			/_nCustomColorSD null pt		}def	}ifelse}def/initializeSinglePassSeps{	/_decodeNorm	[0 1] pt	/_decodeInvert 	[1 0] pt	/spotConverted	{	 begin			name null eq{				false			}{				tintValue null eq tintImage null eq and{					true				}{					_inDistiller{						false					}{						false						currentpagedevice/SeparationColorNames get{name eq or}forall						not					}ifelse				}ifelse			}ifelse	 end	}def	/dictImage	{		20 dict dup begin			/Dict xd			/Decode xd			/DataSource xd			/ImageMatrix xd			/BitsPerComponent xd			/Height xd			/Width xd			/ImageType 1 def			Dict	 end		/_image load 1 execImage	}def	/bwImage{	 begin			gsave			currentoverprint{				blackInk{					[/Separation /Black /DeviceGray{}] setcolorspace					_decodeInvert dictImage				}{					5 npop				}ifelse			}{				/DeviceGray setcolorspace				_decodeNorm dictImage			}ifelse			grestore	 end	}def	/ncolorimage where{		pop	}{		/ncolorimage{		 begin				renderCMYK{					cyanInk 					magentaInk and					yellowInk and					blackInk and					not					currentoverprint 					and{							pop pop						gsave						cyanInk{							8 copy							[/Separation /Cyan /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}if						magentaInk{							8 copy							[/Separation /Magenta /DeviceGray{}] setcolorspace							4 -1 roll							3 npop							_decodeNorm dictImage						}if						yellowInk{							8 copy							[/Separation /Yellow /DeviceGray{}] setcolorspace							4 -2 roll							3 npop							_decodeNorm dictImage						}if						blackInk{							4 -3 roll							[/Separation /Black /DeviceGray{}] setcolorspace							3 npop							_decodeNorm dictImage						}{							8 npop						}ifelse						grestore					}{						/_colorimage load 10 execImage					}ifelse				}{					6 npop					gsave					spot1 begin						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							4 copy							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							1 setgray fill						}ifelse				 end					spot2 begin						true setoverprint						name null ne tintImage null ne and{							[/Separation name /DeviceGray{}] setcolorspace							tintImage 							name /Black eq{								_decodeNorm							}{								_decodeInvert							}ifelse 							dictImage						}{							4 npop							1 setgray fill						}ifelse				 end					grestore				}ifelse		 end		}def	}ifelse	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_renderCMYK not{			_rampSD begin				[/DeviceN 					[					spot1 begin						name null ne tintImage null ne and{							name						}if				 end					spot2 begin						name null ne tintImage null ne and{							name						}if				 end					]					_inDistiller {						/DeviceCMYK [							spot1 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 1								}{									0 0 0 0 0								}ifelse						 end							spot2 begin								name null ne tintImage null ne and{									spot_C spot_M spot_Y spot_K 2								}{									0 0 0 0 0								}ifelse						 end							5 1 roll 6 -2 roll add							dup 1 eq {								pop								8 /index cvx 1 /exch cvx /sub cvx								9 1 /roll cvx							}{								2 eq {									8 /index cvx 1 /exch cvx /sub cvx									10 1 /roll cvx								}if							}ifelse							4 1 /roll cvx 5 -2 /roll cvx							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx							3 1 /roll cvx 4 -2 /roll cvx							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx							2 1 /roll cvx 3 -2 /roll cvx							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx							6 -2 /roll cvx /pop cvx /pop cvx						] cvx bind					}{						/DeviceCMYK {}					}ifelse				] setcolorspace		 end			/_nColorSpace currentcolorspace pt		}if				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C0_Space _nColorSpace pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					spot1 begin 						name null ne{							tintValue						}if				 end					spot2 begin 						name null ne{							tintValue						}if				 end			 end			] pt			/_C1_Space _nColorSpace pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}def/initializeMultiPassSeps{	/invertXfer{		[		{			1 exch sub		}/exec load systemdict /currenttransfer get exec /exec load		] cvx systemdict /settransfer get exec	}def	/ccThrough{		gsave		1 setCustomColor		currentcmykcolor		grestore		add add add 0 ne	}def	/spotConverted	{	 begin			_isCMYKSep not{				false			}{				name null eq{					false				}{					tintValue null eq tintImage null eq and{						true					}{						spot_C spot_M spot_Y spot_K name ccThrough					}ifelse				}ifelse			}ifelse	 end	}def	/spotChannel	{		_isCMYKSep{			pop false		}{			/_spotDict xp				_spotDict/name get null eq{					false				}{					_spotDict/spot_C get					_spotDict/spot_M get					_spotDict/spot_Y get					_spotDict/spot_K get					_spotDict/name get					ccThrough 				}ifelse		}ifelse	}def	/getChannelData	{		_isCMYKSep dup{			pop renderCMYK		}if		{			_blackPlate{				4 1 roll 3 npop blackInk			}{				_yellowPlate{					4 2 roll 3 npop yellowInk				}{					_magentaPlate{						4 3 roll 3 npop magentaInk					}{						3 npop cyanInk					}ifelse				}ifelse			}ifelse			{				true /nonZeroData			}{				true /zeroData			}ifelse		}{			4 npop			spot1/name get null ne 			spot1 spotChannel and{				spot1/tintImage get dup null ne{					false /nonZeroData				}{					pop false /noData				}ifelse			}{				spot2/name get null ne 				spot2 spotChannel and{					spot2/tintImage get dup null ne{						false /nonZeroData					}{						pop false /noData					}ifelse				}{					false /noData				}ifelse			}ifelse		}ifelse	}def	/renderChannelData	{		/_tmp xp		_tmp /nonZeroData ne currentoverprint and{			pop			_tmp /zeroData eq{pop}if			4 npop		}{			_tmp /nonZeroData eq{				{					invertXfer				}if					systemdict/image				get 5 execImage			}{				pop				_tmp /zeroData eq{pop}if				4 npop				knockOut			}ifelse		}ifelse	}def	/bwImage{	 begin			gsave			dup dup dup			getChannelData			exch pop false exch			renderChannelData			grestore	 end	}def	/ncolorimage{	 begin			pop pop			gsave			spot2/name get null ne spot2 spotChannel and{				true setoverprint			}if			getChannelData 			renderChannelData			grestore	 end	}def	/getRampColorSpace{				/_renderCMYK _rampSD begin renderCMYK end pt				_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C0 [currentcolor] pt			/_C0_Space currentcolorspace pt		}{			/_C0 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C0_Space /DeviceGray pt		}ifelse				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if				_renderCMYK{			/_C1 [currentcolor] pt			/_C1_Space currentcolorspace pt		}{			/_C1 [				_nCustomColorSD begin					0					spot1 begin 						name null ne						tintValue null ne and						spot1 spotChannel and{							pop tintValue						}if				 end					spot2 begin 						name null ne						tintValue null ne and						spot2 spotChannel and{							pop tintValue						}if				 end					1 exch sub			 end			] pt			/_C1_Space /DeviceGray pt		}ifelse				/_rampColorSpace _C0_Space pt		_spotColor{			nsetcustomcolorend		}if	}def}defendenddefaultpacking setpacking%%EndResource%%BeginResource: procset AGM_Gradient 1.0 0%%Title: (AGM Gradient Procset)%%Version: 1.0 0%%CreationDate: (4/26/96) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /AGM_Gradient 20 dict dup begin put/AGM_Gradient_private 201 dict def/initialize{	AGM_Gradient begin	AGM_Gradient_private begin	initializeVars		/bd systemdict/mark get def	/ed		_level2PS 		{			(>>)		}{			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)		} ifelse	cvx def		_level2PS{		initializeLev2	}{		initializeLev1	}ifelse		queryDevice		initializeRectFill	initializeShading	initializeOps	_producingSeps{		AGM_Gradient_Sep/initialize get exec	}{		initializeComposite	}ifelse	_illustrator{		/f{}def		/F{}def		/s{}def		/S{}def		/b{}def		/B{}def	}if	/image where{		/image get /_image xd	}if	/colorimage where{		/colorimage get /_colorimage xd	}if	AGM_Gradient_private	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall	AGM_Gradient	{		dup xcheck 1 index type /arraytype eq and		{			bind		}if		pop pop	}forall end		currentdict readonly pop end}def/initializeAI{	pop pop 	AGM_Gradient/AGM_Gradient_private get /_illustrator true put	AGM_Gradient/initialize get exec		AGM_Gradient begin}def/unload{	systemdict/languagelevel known{		systemdict/languagelevel get 2 ge{			userdict/AGM_Gradient_Sep 2 copy known{				undef			}{				pop pop			}ifelse			userdict/AGM_Gradient 2 copy known{				undef			}{				pop pop			}ifelse		}if	}if}def/terminate{	currentdict AGM_Gradient eq{	 end	}if}def AGM_Gradient_private begin/initializeVars{	/_d255 256 array def	0 1 255{		_d255 exch dup 255 div put	}bind for	/_d255- 256 array def	0 1 255{		_d255- exch 1 _d255 2 index get sub put	}bind for	/_sSave nd	/_dUserSpace matrix defaultmatrix def	/_bUMatrix matrix def	/_imageMatrix matrix def	/_saveMatrix matrix def	/_xm matrix def	/_ccAry1 5 array def	/_bbox 4 array pt	/_level2PS 		systemdict/languagelevel known dup{			pop systemdict/languagelevel get 2 ge		}if	def	/_level3PS		_level2PS systemdict/shfill known and	def	currentdict /_illustrator known not{		/_illustrator false def	}if	}def/initializeOps{	AGM_Gradient begin	currentdict/Bc known not{		/Bc{					_renderFlag 2 eq _enabledSmoothShade or{				6 npop			}{				pushBSpace				_rampIndex 0 eq{					pop pop					setCStop				}if				linealFill				popBSpace			}ifelse				}def	}if		currentdict/Bg known not{		/Bg{			10 npop			/_gradName xp			/_renderFlag xp			/_enabledSmoothShade false pt					_renderFlag 2 ne{						_illustrator{					_of setoverprint				}if						/_enabledSmoothShade 					_level3PS{						_usingSmoothShade						_producingSeps not						currentoverprint not or and						_noImage not and					}{						false					}ifelse				pt								_illustrator _eo and _renderFlag 3 eq or{					eoclip				}{					clip				}ifelse						_gradNames _gradName 2 copy known{					get					mark exch aload pop					/_gradType xp					1 sub dup /_rampIndex xp					/_maxRampIndex xp					mark exch aload pop					0 0				}if				pop pop				getRampData			}{				mark mark			}ifelse		}def	}if		currentdict/Bm known not{		/Bm{			_renderFlag 2 ne{				_gradType 0 eq{					linealRamp				}{					radialGrad				}ifelse			}{				6 npop			}ifelse		}def	}if		currentdict/Bh known not{		/Bh{			2 npop			/_yHi xp			/_xHi xp			/_radHilite _xHi 0 ne _yHi 0 ne or pt		}def	}if		currentdict/Bn known not{		/Bn{			AGM_Gradient_private begin				dict /_gradNames xp		 end		}def	}if		currentdict/Bd known not{		/Bd{			AGM_Gradient begin			AGM_Gradient_private begin				/_nColorsBd xp				/_gradType xp				/_gradName xp		}def	}if		currentdict/BD known not{		/BD{				currentdict/_gradNames known not{					/_gradNames 20 dict def				}if				] _nColorsBd _gradType				]  _gradName exch /_gradNames xput		 end		 end		}def	}if		currentdict/Bb known not{		/Bb{					AGM_Gradient/AGM_Gradient_private get /_illustrator get not{				AGM_Gradient begin			}if			AGM_Gradient_private begin			_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin			}if			mySave		}def	}if		currentdict/BB known not{		/BB{					/_tmp xp			cleartomark cleartomark					_tmp dup			_renderFlag					myRestore					_producingSeps{			 end			}if					_illustrator dup		 end			not {			 end			}if					{				2 ne exch 0 gt and{					2 eq{						s					}{						S					}ifelse				}{					pop newpath				}ifelse			}{				pop newpath			}ifelse						}def	}if		currentdict/Xm known not{		/Xm{			_xm astore pop		}def	}if	 end}def/queryDevice{	/_inDistiller		systemdict /currentdistillerparams known	def	/_inRipSep		_level2PS{			currentpagedevice/Separations 2 copy known{				get			}{				pop pop false			}ifelse		}{			false		}ifelse		_inDistiller or	def	/_noImage /lv1Fix where{		pop lv1Fix	}{		false	}ifelse	def	/_useShells where{		/_useShells get /_usingShells xp	}{		/_usingShells false def	}ifelse		/_useSmoothShade where{		pop	}{		/_useSmoothShade false def 	}ifelse	/_forceToCMYK where{		pop	}{		/_forceToCMYK false def 	}ifelse	/_cyanPlate 1 0 0 0 testCMYKColorThrough def	/_magentaPlate 0 1 0 0 testCMYKColorThrough def	/_yellowPlate 0 0 1 0 testCMYKColorThrough def	/_blackPlate 0 0 0 1 testCMYKColorThrough def	/_compositeJob		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and	def	/_isCMYKSep		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or	def	/_compositeSpotDevice where{		pop	}{		/_compositeSpotDevice _compositeJob not _inRipSep or{			1		}{			0		}ifelse		def	}ifelse	/_producingSeps _compositeSpotDevice 0 ne def	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def	/_dpiThreshold where{		pop	}{		/_dpiThreshold 600 def	}ifelse	/_screenFreqThreshold where{		pop	}{		/_screenFreqThreshold 150 def	}ifelse	/_contoneDevice where{		pop	}{		/_contoneDevice false def	}ifelse	/_subSampleOK 		_deviceDPI _dpiThreshold le 		currentScreenFreq _screenFreqThreshold le and 		_contoneDevice not and 	def}def/initializeRectFill{	/rectfill where dup{		exch pop not _producingSeps or	}{		not	}ifelse	{		/rectfill{			gsave			newpath			4 2 roll moveto			1 index 0 rlineto			0 1 index rlineto			1 index neg 0 rlineto			pop pop			closepath			fill			grestore		}def	}if}def/initializeLev1{	/currentScreenFreq{		currentscreen pop pop	}def	/_byte 1 string def	/colorimage where{		pop	}{		/colorimage{			pop pop			/_blackTmp xp			/_yellowTmp xp			/_magentaTmp xp			/_cyanTmp xp			/_cnt 0 pt			[			_byte dup 0			_cyanTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx			_magentaTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx			_yellowTmp				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx			_blackTmp 				/_cnt cvx /get cvx _d255 /exch cvx /get cvx			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/dup cvx 1 /gt cvx{				pop 1			}/if cvx			255 /mul cvx /cvi cvx			256 /mod cvx			/dup cvx 0 /lt cvx{				pop 0			}/if cvx			/put cvx			/_cnt dup cvx 1 /add cvx /pt cvx			] cvx			bind			/_image load 5 execImage		}def	}ifelse}def/initializeLev2{	/level2ScreenFreq{	 begin		60		HalftoneType 1 eq{			pop Frequency		}if		HalftoneType 2 eq{			pop GrayFrequency		}if		HalftoneType 5 eq{			pop Default level2ScreenFreq		}if		 end	}def	/currentScreenFreq{		currenthalftone level2ScreenFreq	}def}def/initializeShading{	_useSmoothShade _level3PS and{		/_usingSmoothShade true pt		initializeLev3_Ops	}{		/_usingSmoothShade false pt	}ifelse}def/initializeLev3_Ops{	/initShFill{		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt		/_rampFuncsArray _maxRampIndex array pt		/_boundsArray _maxRampIndex 1 sub array pt		/_encodeArray _maxRampIndex 2 mul array pt		/_beginCoord _rampPoint pt		/_colorSpace null pt		/_firstFill _rampIndex _maxRampIndex eq pt		/_lastFill false pt	}def	/linealShFill{		popBSpace		_xm aload pop pushBSpace				/_size _index 1 add pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt		}if				bd			/ShadingType 2			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_firstFill _lastFill]			/Domain [0 1] 			/Coords [_beginCoord 0 _endCoord 0]		ed		shfill	}def		/radialShFill{		/_size _maxRampIndex _index sub pt		_size _maxRampIndex lt {			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt			/_boundsArray _boundsArray _index _size 1 sub getinterval pt			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt		}if				/_rampLen _beginCoord _endCoord sub pt		bd			/ShadingType 3			/ColorSpace _colorSpace			_rgbInCMYK{				/Function [					_cData sampFunc					_mData sampFunc					_yData sampFunc					_kData sampFunc				]			}{				/Function 					bd						/FunctionType 3						/Domain [0 1]						/Functions _rampFuncsArray						/Bounds _boundsArray						/Encode _encodeArray					ed			}ifelse			/Extend [_lastFill _firstFill]			/Domain [0 1] 			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 		ed		shfill				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if	}def		%	/sampFunc{		/_tmp exch pt		bd			_tmp length 1 eq {				_tmp 0 get				/_tmp 2 string pt				dup _tmp 0 3 -1 roll put				_tmp 1 3 -1 roll put			}if			/FunctionType 0			/Order 1			/Size [_tmp length]			/Domain [0 1]			/BitsPerSample 8			/DataSource _tmp			/Range [0 1]		ed	}def		/fillRamp{				/_invert _midPoint 0.5 lt pt		_rampIndex _maxRampIndex eq {			initShFill		}if				getRampColorSpace				_colorSpace null eq{			/_colorSpace _rampColorSpace pt		}{			_colorSpace _rampColorSpace ne _rgbInCMYK or{				/_index _index 1 				_gradType 0 eq{					sub pt					linealShFill				}{					add pt					radialShFill				}ifelse				initShFill				/_colorSpace _rampColorSpace pt			} if		}ifelse		/_endCoord _endPoint pt			/_rgbInCMYK false pt		_producingSeps _forceToCMYK or _rgbRamp and {			_spotColor{				_renderCMYK			}{				_isCMYKSep			}ifelse		}{			false		}ifelse		{			_compositeJob{				/_rgbInCMYK true pt				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor				dup length string copy /_kData exch pt				dup length string copy /_yData exch pt				dup length string copy /_mData exch pt				dup length string copy /_cData exch pt			}{				_rampFuncsArray _index					_cyanPlate{_cyanData}if						_magentaPlate{_magentaData}if						_yellowPlate{_yellowData}if						_blackPlate{_blackData}if					_nSamples expandOne					sampFunc					dup begin /Decode [1 0] def end				put				/_invert false pt			}ifelse		}{			_rampFuncsArray _index				bd					/FunctionType 2					/Domain [0 1]					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div					_gradType 0 eq{						_invert{/C1}{/C0}ifelse _C0						_invert{/C0}{/C1}ifelse _C1					}{						_invert{/C0}{/C1}ifelse _C1						_invert{/C1}{/C0}ifelse _C0					}ifelse				ed			put		}ifelse				_rampIndex 1 ne{			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put		} if				0 1 _invert {exch}if		_encodeArray _index 2 mul 1 add 3 -1 roll put		_encodeArray _index 2 mul 3 -1 roll put		_rampIndex 1 eq {			/_lastFill true pt			_gradType 0 eq{				linealShFill			}{				radialShFill			}ifelse		}if		/_index _index 1 		_gradType 0 eq{			add pt		}{			sub pt		}ifelse	}def}def/initializeComposite{	/bwImage{		pop /_image load 5 execImage 	}def	/rampImage{		_enabledSmoothShade{			fillRamp		}{			_color{				_nSamples setImageParms									_rgbRamp _forceToCMYK not and{					_redData _greenData _blueData _nSamples 3 expandColor					true 3 null ncolorimage				}{					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor					true 4 null ncolorimage				}ifelse			}{				_nSamples setImageParms _blackData null bwImage			}ifelse		}ifelse	}def	/setCStop{		/_colorStyle exch pt		_colorStyle 0 eq{			1 exch sub			0 0 0			4 -1 roll		}if				_colorStyle 2 eq{			_forceToCMYK{				3 npop setcmykcolor			}{				setrgbcolor 4 npop			}ifelse		}if				_colorStyle 3 eq{			1 exch sub /_tmp xp			pop			4{				_tmp mul 4 1 roll			}repeat		}if				_colorStyle 4 eq{			_forceToCMYK{				6 npop setcmykcolor			}{				3 -1 roll pop pop				1 exch sub /_tmp xp				3{					1 exch sub _tmp mul 1 exch sub 3 1 roll				}repeat				setrgbcolor 				4 npop			}ifelse		}if		_colorStyle 2 ne _colorStyle 4 ne and{			null nsetcustomcolor		}if	}def	/nsetcustomcolor	{		pop setcmykcolor	}def	/nsetcustomcolorend	{	}def	/ncolorimage{		pop 		/_colorimage load 10 execImage	}def	_noImage not _level2PS not and{		/linealFill{			8 setImageParms			_color{				currentcmykcolor				4{					makeByte8 4 1 roll				}repeat				true 4 null ncolorimage			}{				currentgray makeByte8 null bwImage			}ifelse		}def	}if	/getRampColorSpace{		_nSamples 1 gt{ 			/_ndx 0 pt			[blendColor] cvx exec		}if		/_C0 [currentcolor] pt		/_C0_Space currentcolorspace pt				_nSamples 1 gt{ 			/_ndx _nSamples 1 sub pt			[blendColor] cvx exec		}if		/_C1 [currentcolor] pt		/_C1_Space currentcolorspace pt				/_rampColorSpace _C0_Space pt				_spotColor{			nsetcustomcolorend		}if	}def}def/npop{	{pop}repeat}def/xd{	exch def}def/nd{	null def}def/pt{	AGM_Gradient_private 3 1 roll put}def/xp{	exch pt}def/xput{	dup load dup length exch maxlength eq{		dup dup load dup		length 2 mul dict copy def	}if	load begin		def  end}def/mySave{	save /_sSave xp}def/myRestore{	_sSave type /savetype eq{		_sSave restore	}if}def/gMark{	counttomark 2 add -1 roll}def/execImage{	/_tmp xp	{		exec	}stopped{		$error /errorname get /undefinedresult ne{			stop		}{			_tmp npop		}ifelse	}if}def/pushBSpace{	newpath gsave	_bUMatrix astore concat }def/popBSpace{	grestore}def/makeByte8{	/_tmp 0 pt	255 mul cvi	8 string 8{		dup _tmp 3 index put 		/_tmp _tmp 1 add pt	}repeat	exch pop}def/setImageParms{	1 8 2 index 0 0 1 0 0 _imageMatrix astore}def/linealFill{	0 0 1 1 rectfill}def/testCMYKColorThrough{	gsave	setcmykcolor currentcmykcolor	grestore	add add add 0 ne}def/expandOne	{	/_tmp xp	dup type /stringtype ne{		_tmp string		exch		dup 0 ne{			255 mul cvi			0 1 _tmp 1 sub{				3 copy				exch put pop			}for		}if		pop	}if}def/expandColor{	/_channels xp	/_len xp	_channels{		_len expandOne _channels 1 roll	}repeat}def/blendColor{		_color{		_rgbRamp _producingSeps not and _forceToCMYK not and{			_redData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_greenData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blueData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			/setrgbcolor cvx		}{			_cyanData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_magentaData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_yellowData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if			_blackData dup type /stringtype eq{				/_ndx cvx /get cvx _d255 /exch cvx /get cvx			}if				_spotColor{				_rampSD begin					/_rampSD cvx /begin cvx						spot1 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx						spot2 begin						tintImage dup type /stringtype eq{							/_ndx cvx /get cvx _d255- /exch cvx /get cvx						}{							dup null ne{								name type /nametype ne{									1 exch sub								}if							}if						}ifelse				 end					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx					/end cvx			 end				/_rampSD cvx				/nsetcustomcolor cvx			}{				/setcmykcolor cvx			}ifelse		}ifelse	}{		_blackData dup type /stringtype eq{			/_ndx cvx /get cvx _d255 /exch cvx /get cvx		}if				_enabledSmoothShade{			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx		}{			 /setgray cvx		}ifelse	}ifelse}def/useRectImage{	_subSampleOK _enabledSmoothShade not and{		{			mark			0 1 dtransform atan cvi 90 mod 0 eq			1 0 dtransform atan cvi 90 mod 0 eq		} stopped		{			cleartomark			false		}		{			and exch pop		} ifelse	}{		false	}ifelse}def/linealImage{	_noImage{		rectImage	}{		_producingSeps{				AGM_Gradient_Sep/AGM_Gradient_Sep_private get				/rampImage get exec		}{			useRectImage{				rectImage			}{				rampImage			}ifelse		}ifelse	}ifelse}def/linealRamp{	pushBSpace	_ramp{		linealImage	}{		linealFill	}ifelse	popBSpace	/_rampIndex _rampIndex 1 sub pt	_rampIndex 0 gt{		getRampData	}if}def/radialGrad{	/_usingShells currentoverprint _producingSeps and _usingShells or pt	/_firstShell true pt	_enabledSmoothShade not{		currentoverprint _producingSeps and{						newpath			clippath pathbbox 			1 add 4 1 roll			1 add 4 1 roll			1 sub 4 1 roll			1 sub 4 1 roll			_bbox astore pop						newpath			_bbox 0 get _bbox 1 get moveto			_bbox 2 get _bbox 1 get lineto			_bbox 2 get _bbox 3 get lineto			_bbox 0 get _bbox 3 get lineto			closepath			6 copy			gsave _bUMatrix astore concat			1 0 moveto 0 0 1 0 360 arc closepath			eoclip fill			popBSpace		}{			fill		}ifelse	}if	pushBSpace		_radHilite{		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp		_rampPoint 1 lt{			1 _rampPoint sub dup _xHi mul exch _yHi mul translate		}if	}if	_rampIndex{		radialRamp		/_rampIndex _rampIndex 1 sub pt		_rampIndex 0 gt{			getRampData		}if	}repeat		popBSpace	}def/getNSamples{	0 exch	{		dup type /stringtype eq{			length exch pop exit		}if		pop	}forall	dup 0 eq{		pop 1	}if}def/getRampData{	/_rampType gMark pt	/_color _rampType 0 gt pt	/_ccRGB _rampType 5 eq _rampType 6 eq or pt	/_rgbRamp _rampType 4 eq _ccRGB or pt	/_ccProcess _rampType 2 eq _rampType 3 eq or pt	_producingSeps{		_rampSD initSpotDict		/_spotColor _ccProcess _ccRGB or pt	}{		/_spotColor false pt	}ifelse	/_ramp true pt	100 div /_rampPoint xp	100 div /_midPoint xp		dup /_colorStyle xp	_colorStyle 0 eq{ 		2	}{		_colorStyle 1 eq{ 			5		}{			_colorStyle 2 eq{				8			}{				_colorStyle 3 eq{					_producingSeps{						_rampSD /spot1 get begin							/name 3 index def							/spot_K 4 index def							/spot_Y 5 index def							/spot_M 6 index def							/spot_C 7 index def					 end					}if					7				}{					_producingSeps{						_rampSD/spot1 get begin							/name 4 index def							/spot_K 8 index def							/spot_Y 9 index def							/spot_M 10 index def							/spot_C 11 index def					 end					}if					11				} ifelse			}ifelse		}ifelse	}ifelse	/_tmp xp	_tmp index 100 div /_endPoint xp		_gradType 1 eq{		_tmp 1 add index 100 div /_midPoint xp	}if		_producingSeps{		_tmp 2 add index /_nextColorStyle xp		_nextColorStyle 3 eq{			/_tmp _tmp 4 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 2 add index def					/spot_Y _tmp 3 add index def					/spot_M _tmp 4 add index def					/spot_C _tmp 5 add index def			 end			}{				pop			}ifelse		}if		_nextColorStyle 4 eq{			/_tmp _tmp 5 add pt			_tmp index dup			_rampSD/spot1 get /name get ne{				_rampSD /spot2 get begin					/name xd					/spot_K _tmp 5 add index def					/spot_Y _tmp 6 add index def					/spot_M _tmp 7 add index def					/spot_C _tmp 8 add index def			 end			}{				pop			}ifelse		}if	}if	_rampType 3 eq _rampType 6 eq or{		/_tint2Data gMark pt	}if	_ccProcess _ccRGB or{		/_tint1Data gMark pt	}if	_rgbRamp{		/_blueData gMark pt		/_greenData gMark pt		/_redData gMark pt	}if		_producingSeps{		_ccProcess _ccRGB or{			_rampType 3 eq _rampType 6 eq or{				_rampSD /spot2 get begin					/tintImage _gradType 0 eq{						_tint2Data					}{						_tint1Data					}ifelse					def					name null eq{						/name /Black def					}if			 end			}if			_rampSD /spot1 get begin				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{					_tint1Data				}{					_tint2Data				}ifelse				def				_rampType 2 eq _rampType 5 eq or{					name null eq{						/name _rampSD/spot2 get /name get def						/spot_C _rampSD/spot2 get /spot_C get def						/spot_M _rampSD/spot2 get /spot_M get def						/spot_Y _rampSD/spot2 get /spot_Y get def						/spot_K _rampSD/spot2 get /spot_K get def						_rampSD/spot2 get /name null put					}if				}{					name null eq{						/name /Black def					}if				}ifelse		 end		}if	}if	/_blackData gMark pt	_rampType 0 gt{		counttomark 4 add -3 roll		/_yellowData xp		/_magentaData xp		/_cyanData xp	}if	_ramp{		/_nSamples			[			_rampType 0 eq {_blackData}if			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if			] getNSamples pt		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if	} if		setCStop}def/rectImage{	gsave	/_sInc 1 pt	/_bInc 1 _nSamples div pt	/_nSubSamples _nSamples pt	/_optimize false pt			_subSampleOK{		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt				_pChange .5 gt dup /_optimize xp{			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc 1 _nSubSamples div pt			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt		}if	}if	0	_nSubSamples	[	/dup cvx	_optimize {		/round cvx /cvi cvx	} if	/_ndx /exch cvx /pt cvx	blendColor	0 0 _bInc 1 /rectfill cvx	_bInc 0 /translate cvx	_sInc /add cvx	] cvx	bind	repeat	pop	_spotColor{		nsetcustomcolorend	}if	grestore}def/radialInit{	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt	/_sInc -1 pt	/_rampLen _rampPoint _endPoint sub pt	/_bInc _rampLen _nSamples div neg pt	/_optimize false pt	_subSampleOK{		/_uRampLen			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt			2 copy lt{				exch			}if pop		pt		/_pChange 			_uRampLen 0 eq{				0			}{				_nSamples _uRampLen div			}ifelse		pt		_pChange .5 gt dup /_optimize xp{			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt			/_bInc _rampLen _nRadSamples div neg pt			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt		}if	}if	_radHilite{		/_xBCInc _xHi _rampLen mul _nRadSamples div pt		/_yBCInc _yHi _rampLen mul _nRadSamples div pt	}if}def/radialRamp{	_enabledSmoothShade{		fillRamp	}{		/_saveMatrix _saveMatrix currentmatrix def				radialInit			%		%		true		_producingSeps _rgbRamp not and{			_nSamples 1 gt{ 				pop				/_ndx 0 pt				[blendColor] cvx exec				currentInkN				/_ndx _nSamples 1 sub pt				[blendColor] cvx exec				currentInkN				or			}if		}if		{			_rampPoint					_nSamples 1 sub					_nRadSamples 			[				/dup cvx						_optimize{					/round cvx /cvi cvx				}if						/_ndx /exch cvx /pt cvx								_usingShells{					/_firstShell cvx{						/_firstShell false pt					}{						0 0 3 index 360 0 arcn fill					}/ifelse cvx				}if						blendColor						_usingShells{					0 0 3 /index cvx 0 360 /arc cvx 				}{					0 0 3 /index cvx 0 360 /arc cvx /fill cvx				}ifelse						/exch cvx _bInc /add cvx /exch cvx						_sInc /add cvx						_radHilite{					_xBCInc _yBCInc /translate cvx				}if			] cvx bind			repeat					pop pop		}{			_usingShells{				0 0 _rampPoint 360 0 arcn fill			}if		}ifelse			_saveMatrix setmatrix				_radHilite{			_xHi _rampLen mul _yHi _rampLen mul translate		}if				_usingShells _rampIndex 1 eq and{			fill		}if			_spotColor{			nsetcustomcolorend		}if	}ifelse}defendenddefaultpacking setpacking%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetupuserdict /_useSmoothShade true putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec%AI5_Begin_NonPrintingNp1 Bn%AI5_BeginGradient: (Unnamed gradient 1)(Unnamed gradient 1) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 1 1 1 k(C=100 M=100 Y=100 K=100) Pc1 g(K=0) Pc0 g(K=100) Pc0 1 0.91 0 (PANTONE 485 CV) 0 x(PANTONE 485 CV) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Flare Plugin) (Flare) (Flare)%AI8_PluginGroupInfo(Adobe Symbolism) (Adobe Symbolism) (Symbolism)%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp)%AI8_PluginGroupInfo(Pathfinder Suite) (Adobe Compound Shape) (Pathfinder Suite)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 Auu1 Ap0 O0 1 0.91 0 (PANTONE 485 CV) 0 x1 R0 1 0.91 0 (PANTONE 485 CV) 0 X0 J 0 j 0.2 w 4 M []0 d0 XR376.0981 255.8242 m376.0981 403.5293 L228.4326 403.5293 L228.4326 255.8242 L376.0981 255.8242 LbUu0 g0 G376.0991 403.5171 m376.0991 551.1763 L228.4009 551.1763 L228.4009 403.5171 L376.0991 403.5171 Lbu*u0 Ap1 g1 w252.3691 501.6333 m249.0688 501.6836 246.9873 501.5825 243.8896 502.7505 c243.8896 506.7617 L246.6826 504.4766 249.1704 504.2227 252.7754 504.1719 c258.7671 503.9688 262.4229 506.6602 262.4229 511.3818 c262.4229 514.9873 259.7319 516.8657 256.584 518.6436 c249.6782 522.6035 L245.9717 524.7871 243.7881 527.2749 243.7373 531.3374 c243.6865 537.3286 249.5767 540.8833 255.9746 540.6797 c258.9707 540.5781 260.8491 540.6797 263.5908 539.563 c263.5908 535.6533 L261.458 537.6841 259.3257 538.1406 256.3809 538.2427 c252.2168 538.4966 247.647 535.7041 248.0029 531.54 c248.2568 528.8491 250.0845 527.3765 252.4707 526.0054 c258.5137 522.502 L263.083 519.8613 266.8911 518.4399 267.145 511.9917 c267.4497 503.6133 259.2241 501.4805 252.3691 501.6333 cf*U*u313.8047 536.4995 m313.5161 535.9707 313.2754 535.6338 313.083 535.0566 c301.1045 501.6704 L291.6274 527.0708 L282.3428 501.4785 L269.6431 535.6816 L269.4985 536.2109 269.3545 536.5479 268.9697 537.0288 c268.5366 537.5581 268.248 537.8467 267.6704 538.1836 c274.2612 538.1836 L274.0205 537.7983 273.8765 537.5581 273.8281 537.125 c273.7319 536.7402 273.6841 536.4517 273.8281 536.0669 c282.6318 511.0513 L290.1846 531.1602 L288.4043 535.6816 L288.1636 536.3071 287.8271 536.5962 287.4424 537.0771 c287.1055 537.5098 286.8169 537.7983 286.4321 538.1836 c292.9746 538.1836 L292.7822 537.8467 292.686 537.6543 292.5898 537.2695 c292.4453 536.5962 292.5415 536.1631 292.7344 535.5376 c301.5854 510.9551 L309.7642 535.249 L310.0522 535.8745 310.2451 536.3071 310.1968 536.9326 c310.1484 537.4619 310.0522 537.7983 309.7642 538.2314 c315.0557 538.2314 l314.5264 537.606 314.2378 537.1729 313.8047 536.4995 cf*U*u1 D319.2402 527.7451 m315.0767 527.7451 l314.8491 527.7451 L314.9751 527.5557 l315.2251 527.1807 315.3628 526.8882 315.502 526.436 c315.6714 525.9287 315.6997 525.6299 315.6997 525.1523 c315.6997 504.5718 l315.6997 504.0771 315.6997 503.7505 315.5063 503.2998 c315.5034 503.2935 L315.5015 503.2866 l315.4067 502.9702 315.3154 502.7798 315.1108 502.4731 c314.9844 502.2837 L315.2124 502.2837 l319.1724 502.2837 l319.3882 502.2837 L319.2769 502.4683 l319.2246 502.5552 319.1733 502.6323 319.1235 502.7065 c318.9795 502.9233 318.8652 503.0942 318.8188 503.373 c318.7188 504.2065 318.7188 505.333 318.7188 506.6367 c318.7188 525.2197 l318.7188 525.5894 318.7188 525.8115 318.9512 526.6074 c319.0835 526.9707 319.1841 527.2383 319.3491 527.5684 c319.4375 527.7451 L319.2402 527.7451 Lf*U*u0 D357.9619 536.644 m357.8179 535.8745 357.8179 535.4414 357.8179 534.7197 c357.8657 501.0933 L328.8096 533.1802 L328.8096 506.4814 L328.8096 505.4229 328.8096 505.4229 329.146 503.8354 c329.2422 503.2583 329.3867 502.9214 329.5791 502.2959 c325.0088 502.2959 L325.3457 502.7769 325.5381 503.0659 325.6343 503.5947 c325.8271 504.3164 325.8271 504.7979 325.8271 505.519 c325.8271 535.5376 L325.8271 536.1152 325.731 536.5479 325.4419 537.0771 c325.2017 537.606 324.9131 537.8945 324.4316 538.1836 c329.7236 538.1836 L354.8833 509.4639 L354.8833 532.2661 L354.8833 533.998 354.979 535.1045 354.6426 536.8364 c354.5464 537.3657 354.4507 537.7021 354.3062 538.2314 c358.3467 538.2314 l358.1548 537.6543 358.0581 537.2695 357.9619 536.644 cf*U*u269.1133 459.9121 m259.54 459.9121 L259.8286 460.2969 259.9248 460.5376 260.1172 460.9224 c260.3579 461.5957 260.4541 462.0767 260.4541 462.7983 c260.4541 492.3838 L260.4541 493.2017 260.3096 493.731 259.9731 494.501 c259.7324 495.0298 259.54 495.3667 259.2031 495.8477 c270.0752 495.8477 L274.7417 495.8477 278.3496 491.9028 278.5898 487.2368 c278.6865 483.8213 277.291 481.9932 274.6934 480.502 c273.3462 479.6836 L274.7896 479.1543 L278.7827 477.8076 280.9956 474.873 280.9956 470.1587 c280.9473 463.8086 276.4253 459.9121 269.1133 459.9121 cf1 D267.7661 493.4424 m264.2544 493.4424 L264.2544 480.502 L267.3809 480.502 L272.625 480.502 275.0303 483.3398 274.8857 487.2368 c274.6934 490.8442 272.2402 493.4424 267.7661 493.4424 cf267.5737 478.1924 m266.3711 478.1924 265.6494 478.1924 264.4468 477.9038 c264.4468 462.5098 L265.7456 462.125 266.6118 461.9805 267.9585 462.0767 c272.6729 462.3652 277.291 465.0112 277.147 470.207 c277.0024 476.3643 272.3364 478.0483 267.5737 478.1924 cf*U*u0 D314.6001 494.2603 m314.5034 493.5869 314.5518 493.2017 314.5518 492.5283 c314.5518 471.5059 L314.5518 464.5786 308.6343 459.5273 301.2261 459.3828 c293.2886 459.2866 286.8423 464.3857 286.8423 471.6982 c286.8423 492.3359 L286.8423 492.9614 286.8901 493.3462 286.7939 493.9712 c286.6978 494.7412 286.6021 495.1743 286.3613 495.8477 c291.2681 495.8477 L291.0273 495.3184 290.9316 494.9819 290.835 494.3564 c290.6909 493.731 290.7388 493.2979 290.7388 492.6729 c290.7388 472.1309 L290.7388 466.5986 295.6943 462.3174 301.2261 462.5098 c306.71 462.6538 310.5586 466.7432 310.5586 471.8428 c310.5586 492.4321 L310.5586 493.1533 310.5586 493.5869 310.4629 494.2603 c310.3184 494.8857 310.2222 495.2705 309.9814 495.8477 c314.9844 495.8477 l314.7925 495.2705 314.6963 494.8857 314.6001 494.2603 cf*U*u342.917 459.8638 m328.4854 478.6255 L328.1006 479.1064 327.9561 479.4434 327.5229 479.7803 c327.3306 479.9727 327.1382 480.0688 326.8975 480.2129 c326.8975 463.7124 L326.8975 462.9429 326.8496 462.5098 327.042 461.7402 c327.1382 461.0664 327.3306 460.6816 327.5713 460.0083 c322.2793 460.0083 L322.5679 460.5859 322.8086 460.9224 322.8564 461.4995 c323.001 462.2212 323.001 463.8086 323.001 465.1558 c323.001 490.9409 L323.001 492.2881 322.9526 493.0576 322.7124 494.4043 c322.5679 495.0298 322.3271 495.3667 322.0386 495.896 c332.8628 495.896 L337.5771 495.896 341.8105 492.7686 341.666 487.6216 c341.5703 482.6182 337.1924 478.3369 331.9009 479.1543 c332.1895 478.9141 332.3335 478.7217 332.6226 478.4814 c333.6323 477.519 334.21 476.8936 335.1235 475.7393 c343.6865 464.8672 L344.7935 463.4238 345.6592 462.2695 346.7656 461.3076 c347.4395 460.7295 347.8721 460.3931 348.5938 459.8638 C342.917 459.8638 lf1 D330.7461 493.731 m329.2549 493.731 328.3408 493.6831 326.9458 493.0576 c326.9458 480.646 L327.6191 480.5498 328.918 480.502 330.0728 480.5498 c335.0273 480.9346 338.0103 483.5327 337.7217 487.5254 c337.5293 490.4116 336.5669 493.4907 330.7461 493.731 cf*U*u0 D305.3589 451.9727 m305.2144 451.2026 305.2144 450.77 305.2144 450.0483 c305.2627 416.4219 L276.2065 448.5088 L276.2065 421.8101 L276.2065 420.7515 276.2065 420.7515 276.543 419.1636 c276.6392 418.5864 276.7837 418.25 276.9761 417.6245 c272.4063 417.6245 L272.7427 418.1055 272.9351 418.394 273.0313 418.9233 c273.2236 419.645 273.2236 420.126 273.2236 420.8477 c273.2236 450.8662 L273.2236 451.4434 273.1274 451.876 272.8389 452.4053 c272.5986 452.9346 272.3096 453.2236 271.8286 453.5117 c277.1206 453.5117 L302.2798 424.792 L302.2798 447.5947 L302.2798 449.3267 302.3765 450.4331 302.0396 452.165 c301.9434 452.6943 301.8472 453.0308 301.7026 453.5601 c305.7437 453.5601 l305.5513 452.9824 305.4551 452.5977 305.3589 451.9727 cf*U*u334.2188 417.6245 m313.4854 417.6245 L313.8218 418.1055 313.9658 418.4419 314.1104 418.9712 c314.3027 419.645 314.2065 420.126 314.2065 420.7993 c314.2065 450.9141 L314.2065 451.5396 314.1104 451.9243 313.918 452.4536 c313.7256 452.8867 313.5811 453.127 313.2446 453.4639 c331.5728 453.4639 L331.5728 449.856 L331.1401 450.2886 330.7554 450.5293 330.1777 450.7217 c329.3604 451.0103 328.7832 450.8662 327.9648 450.8662 c318.1992 450.8662 L318.1992 439.0317 L331.5728 439.0317 L331.5728 435.6167 L330.8516 435.9531 330.3706 436.0977 329.5527 436.2896 c328.9751 436.3862 328.5425 436.3862 327.9648 436.3862 c318.3438 436.3862 L318.3438 420.3184 L329.8413 420.3184 L331.4287 420.3184 332.3428 420.4146 333.834 420.8955 c334.5073 421.0884 334.8921 421.2808 335.4697 421.6655 C334.2188 417.6245 lf*U249.4575 442.0889 m249.4795 442.0898 249.6909 442.1563 249.7368 442.1299 c249.7798 442.104 250.4209 441.7358 y250.4268 441.7373 251.0039 441.7056 251.1685 441.6934 c251.2241 441.6895 251.5552 441.6548 251.6123 441.6445 c251.6685 441.6353 252.4839 441.1201 252.5098 441.0918 c252.5898 441.0044 252.8306 440.5215 252.8735 440.4233 c252.9795 440.1748 252.9131 439.7793 252.9272 439.5381 c252.9302 439.46 252.8794 439.207 252.854 439.1289 c252.814 439.0142 252.7817 438.5796 252.7842 438.5674 c252.8022 438.3286 253.1309 437.9873 253.3101 437.9604 c253.5581 437.9233 254.0576 438.2637 254.0444 438.5234 c254.0386 438.6123 253.9941 438.6011 253.9829 438.6855 c253.9531 438.8794 253.4302 439.5513 253.9414 440.6553 c254.1978 441.207 254.8423 441.5151 255.3447 441.5825 c255.6011 441.6172 255.9219 441.5542 256.1953 441.6123 c256.4468 441.665 256.6616 441.8115 256.9121 441.9063 C257.0698 441.772 257.0908 441.7241 v257.1279 441.6294 257.0469 441.4082 257.0176 441.3145 c256.8975 440.9419 257.1851 440.0845 257.208 440.0122 c257.2759 439.7842 257.083 438.9658 256.9546 438.7593 c256.8389 438.5762 256.6436 438.3262 256.3711 438.1992 c255.8896 437.9756 254.686 438.2344 254.5107 437.4141 c254.4932 437.3379 254.4443 437.1626 254.4824 437.0869 c254.5205 437.0093 254.8618 436.7749 254.9087 436.7695 c254.917 436.7686 255.002 436.7832 y255.4111 436.8218 255.5952 437.0732 256.0635 437.3184 c256.2559 437.4209 256.8779 437.6172 257.083 437.6191 c257.1313 437.5503 l257.1914 437.5054 257.3594 437.5718 257.4341 437.5566 c257.5415 437.5337 257.9131 437.4307 257.9507 437.4043 c258.2549 437.1885 258.5171 436.5664 258.627 436.2871 c258.7163 436.0552 259.0361 435.4707 258.9277 435.2676 c258.791 435.0137 258.3267 434.8101 258.1143 434.5977 c257.9663 434.4531 257.751 434.1812 257.4727 434.0479 c257.3735 434.0015 257.0356 433.9468 256.9385 433.9316 c256.4834 433.8657 255.6025 434.2651 255.2632 434.8643 c255.1108 435.1313 255.1724 435.4702 254.9072 435.7432 c254.7168 435.9375 254.1548 436.0483 253.8809 435.7456 c253.8423 435.7041 253.7305 435.3472 253.7388 435.2871 c253.7495 435.1987 253.8193 435.1768 253.8242 435.0908 c253.8252 435.0737 253.7622 434.9644 253.769 434.9502 c253.8838 434.6665 254.3662 434.5532 254.563 434.3247 c254.7236 434.1392 254.7832 433.9097 254.855 433.7598 c254.9497 433.562 255.0581 433.0527 255.0566 433.0293 c255.041 432.8599 255.063 432.5293 255.0005 432.3755 c254.8545 432.022 254.48 431.6665 254.1104 431.4473 c253.7612 431.2407 253.5903 430.875 253.2725 430.8115 c252.9399 430.7466 252.6255 431.2754 252.3477 431.5508 c252.2769 431.6196 252.0688 431.7505 252.0034 431.8232 c251.5962 432.2744 251.5645 432.7339 251.5693 433.1084 c251.5693 433.248 251.5347 433.4033 251.583 433.5283 c251.6484 433.7017 251.9805 434.1948 252.0464 434.2607 c252.2744 434.4937 252.5801 434.5835 252.688 434.8105 c252.7251 434.8926 252.771 435.1714 252.7368 435.2549 c252.6777 435.3945 252.3501 435.6787 252.3311 435.6895 c252.0884 435.8359 251.5181 435.1582 251.5034 435.1123 c251.4785 435.0386 250.9883 434.2539 250.9165 434.1909 c250.7251 434.0249 250.3945 433.8765 250.1895 433.8374 c250.1055 433.8223 249.6582 433.7476 249.5386 433.7427 c249.2725 433.7329 248.6709 434.0308 248.4546 434.2676 c248.2319 434.5093 247.7432 434.8472 y247.6631 434.8364 247.6499 434.834 V247.5591 435.0586 247.4893 435.0947 247.5479 435.2749 c247.6104 435.4722 247.8032 435.5908 247.9102 435.7842 c248.0488 436.0391 248.1157 436.478 248.3213 436.7368 c248.3706 436.7998 248.4678 436.8276 248.5283 436.8809 c248.6421 436.9844 248.8892 437.2573 249.0317 437.335 c249.2959 437.4785 249.8887 437.4766 250.127 437.3809 c250.2539 437.3301 250.7505 437.1001 250.8218 437.0454 c250.9023 436.9829 250.939 436.8389 251.0146 436.7695 c251.0537 436.7314 251.1968 436.6567 251.2861 436.6006 C251.355 436.6489 l251.5674 436.6177 251.8184 436.6177 251.9927 436.8369 c252.0503 436.9121 252.1304 437.123 252.0894 437.2119 c252.0547 437.2847 251.1777 437.8511 251.1196 437.8677 c251.0576 437.8857 250.8926 437.8379 250.8164 437.8618 c250.6602 437.9111 250.5972 438.0225 250.4385 438.1104 c250.3613 438.1523 250.1782 438.1758 250.0977 438.2314 c249.6372 438.5493 249.1973 439.2222 249.1914 439.7515 c249.1865 440.147 249.3989 440.5547 249.4932 440.9355 c249.5791 441.2886 249.3608 441.479 249.3472 441.8071 c249.3418 441.8994 249.4248 442.0024 249.4575 442.0889 Cf355.0566 442.0884 m355.0347 442.0889 354.8232 442.1548 354.7773 442.1289 c354.7339 442.103 354.0933 441.7349 y354.0874 441.7358 353.5098 441.7046 353.3462 441.6924 c353.29 441.688 352.9585 441.6533 352.9019 441.6431 c352.8462 441.6343 352.0303 441.1191 352.0044 441.0908 c351.9243 441.0039 351.6831 440.52 351.6401 440.4219 c351.5347 440.1738 351.6016 439.7783 351.5874 439.5371 c351.584 439.459 351.6348 439.2061 351.6602 439.1274 c351.7002 439.0132 351.7324 438.5791 351.73 438.5664 c351.7124 438.3276 351.3833 437.9863 351.2041 437.9595 c350.9561 437.9229 350.4565 438.2632 350.4702 438.5229 c350.4756 438.6113 350.5205 438.5996 350.5313 438.6846 c350.561 438.8784 351.084 439.5503 350.5728 440.6543 c350.3169 441.2065 349.6719 441.5146 349.1694 441.5811 c348.9136 441.6157 348.5923 441.5532 348.3188 441.6108 c348.0679 441.6641 347.853 441.8105 347.6021 441.9058 C347.4438 441.7705 347.4233 441.7227 v347.3867 441.6284 347.4673 441.4072 347.4966 441.3135 c347.6167 440.9414 347.3291 440.083 347.3062 440.0112 c347.2383 439.7832 347.4316 438.9648 347.5601 438.7583 c347.6753 438.5752 347.8711 438.3252 348.1426 438.1978 c348.624 437.9746 349.8281 438.2339 350.0034 437.4131 c350.021 437.3369 350.0698 437.1616 350.0317 437.0859 c349.9937 437.0083 349.6523 436.7739 349.6055 436.7686 c349.5972 436.7676 349.5122 436.7817 y349.104 436.8203 348.9189 437.0723 348.4507 437.3174 c348.2583 437.4194 347.6362 437.6162 347.4307 437.6182 c347.3828 437.5493 l347.3232 437.5049 347.1543 437.5708 347.0796 437.5557 c346.9727 437.5332 346.6011 437.4297 346.5635 437.4033 c346.2593 437.1875 345.9971 436.5654 345.8872 436.2861 c345.7979 436.0542 345.4785 435.4697 345.5864 435.2666 c345.7227 435.0127 346.188 434.8086 346.4004 434.5962 c346.5479 434.4521 346.7637 434.1802 347.0415 434.0469 c347.1406 434.0005 347.4785 433.9458 347.5757 433.9307 c348.0313 433.8652 348.9111 434.2646 349.2505 434.8633 c349.4033 435.1304 349.3418 435.4692 349.6074 435.7427 c349.7969 435.9365 350.3594 436.0469 350.6333 435.7441 c350.6719 435.7026 350.7832 435.3462 350.7754 435.2866 c350.7646 435.1982 350.6948 435.1758 350.6895 435.0898 c350.689 435.0728 350.752 434.9634 350.7451 434.9492 c350.6304 434.665 350.1479 434.5518 349.9512 434.3237 c349.7905 434.1382 349.7314 433.9082 349.6592 433.7588 c349.5645 433.561 349.4561 433.0522 349.4575 433.0283 c349.4736 432.8589 349.4512 432.5283 349.5137 432.3745 c349.6597 432.021 350.0347 431.6655 350.4038 431.4463 c350.7529 431.2397 350.9238 430.874 351.2417 430.811 c351.5742 430.7456 351.8882 431.2744 352.1665 431.5498 c352.2373 431.6187 352.4448 431.749 352.5103 431.8218 c352.9175 432.2734 352.9497 432.7324 352.9453 433.1074 c352.9448 433.2471 352.9795 433.4023 352.9307 433.5273 c352.8657 433.7007 352.5337 434.1934 352.4678 434.2603 c352.2393 434.4927 351.9341 434.5825 351.8262 434.8101 c351.7891 434.8921 351.7432 435.1704 351.7773 435.2539 c351.8364 435.3936 352.1641 435.6777 352.1831 435.6885 c352.4258 435.835 352.9956 435.1572 353.0103 435.1113 c353.0361 435.0381 353.5259 434.2529 353.5977 434.1899 c353.7891 434.0239 354.1196 433.8755 354.3247 433.8364 c354.4082 433.8213 354.856 433.7461 354.9756 433.7412 c355.2417 433.7324 355.8428 434.0298 356.0596 434.2666 c356.2827 434.5083 356.771 434.8462 y356.8516 434.8354 356.8643 434.8325 V356.9551 435.0576 357.0254 435.0938 356.9663 435.2739 c356.9038 435.4712 356.7114 435.5898 356.604 435.7827 c356.4648 436.0381 356.3984 436.4771 356.1924 436.7358 c356.1436 436.7988 356.0464 436.8271 355.9858 436.8799 c355.8721 436.9834 355.625 437.2563 355.4819 437.3335 c355.2188 437.4771 354.6255 437.4761 354.3872 437.3799 c354.2603 437.3286 353.7632 437.0991 353.6919 437.0444 c353.6118 436.9824 353.5752 436.8374 353.4995 436.7686 c353.46 436.7305 353.3169 436.6558 353.2285 436.5996 C353.1587 436.6475 l352.9468 436.6162 352.6958 436.6167 352.522 436.8359 c352.4639 436.9111 352.3838 437.1221 352.4243 437.2109 c352.4595 437.2842 353.3359 437.8501 353.3945 437.8672 c353.4565 437.8848 353.6216 437.8364 353.6973 437.8604 c353.854 437.9102 353.9165 438.0215 354.0757 438.1094 c354.1533 438.1514 354.3359 438.1743 354.4165 438.2305 c354.877 438.5483 355.3169 439.2212 355.3228 439.7505 c355.3276 440.1455 355.1157 440.5532 355.0205 440.9346 c354.9351 441.2871 355.1533 441.478 355.1675 441.8062 c355.1724 441.8984 355.0889 442.0015 355.0566 442.0884 CfUUUu*u0 R1 G0.2 w271.8257 350.3618 m270.9785 350.0537 270.4263 350.0537 269.5146 350.0283 c266.3174 349.8867 264.0059 352.0698 263.9932 354.9331 c263.9805 357.7964 266.3174 359.9277 269.4116 359.9023 c270.2847 359.8892 270.8496 359.8379 271.6714 359.4912 c271.6714 358.5537 L270.9009 358.9902 270.3364 359.1445 269.4375 359.1572 c266.8564 359.2085 265.0845 357.2954 265.0591 354.9331 c265.0205 352.4419 266.9849 350.7344 269.5015 350.7988 c270.3745 350.8115 271.4019 350.9785 272.3394 351.6333 C271.8257 350.3618 lb*U*u278.9341 350.1953 m273.4004 350.1953 L273.4902 350.3232 273.5288 350.4131 273.5674 350.5547 c273.6187 350.7344 273.5928 350.8628 273.5928 351.0425 c273.5928 359.0801 L273.5928 359.2471 273.5674 359.3496 273.5161 359.4912 c273.4648 359.6064 273.4263 359.6709 273.3364 359.7607 c278.2285 359.7607 L278.2285 358.7979 L278.1128 358.9136 278.0098 358.9775 277.856 359.0288 c277.6377 359.106 277.4834 359.0674 277.2651 359.0674 c274.6587 359.0674 L274.6587 355.9087 L278.2285 355.9087 L278.2285 354.9971 L278.0356 355.0869 277.9072 355.1255 277.689 355.1768 c277.5347 355.2026 277.4189 355.2026 277.2651 355.2026 c274.6973 355.2026 L274.6973 350.9141 L277.7661 350.9141 L278.1895 350.9141 278.4336 350.9395 278.832 351.0684 c279.0117 351.1196 279.1143 351.1709 279.2681 351.2739 C278.9341 350.1953 lb*U*u289.0786 359.3628 m289.04 359.1572 289.04 359.0415 289.04 358.8491 c289.0527 349.874 L281.2974 358.4385 L281.2974 351.312 L281.2974 351.0298 281.2974 351.0298 281.3872 350.606 c281.4131 350.4521 281.4512 350.3618 281.5029 350.1953 c280.2832 350.1953 L280.373 350.3232 280.4243 350.4004 280.4502 350.5415 c280.501 350.7344 280.501 350.8628 280.501 351.0552 c280.501 359.0674 L280.501 359.2217 280.4756 359.3369 280.3984 359.478 c280.3345 359.6196 280.2573 359.6963 280.1289 359.7739 c281.5415 359.7739 L288.2563 352.1079 L288.2563 358.1943 L288.2563 358.6567 288.2822 358.9521 288.1924 359.4141 c288.1665 359.5552 288.1411 359.645 288.1025 359.7866 c289.1812 359.7866 l289.1294 359.6323 289.104 359.5298 289.0786 359.3628 cb*U*u297.2573 358.9902 m297.0522 359.0547 296.9111 359.0801 296.6929 359.0801 c294.5996 359.0801 L294.5996 351.0552 L294.5996 350.8628 294.5869 350.9009 294.6509 350.5415 c294.6641 350.4131 294.7153 350.3232 294.7925 350.1953 c293.3027 350.1953 L293.3672 350.3105 293.3926 350.3877 293.4312 350.5034 c293.4697 350.6958 293.4438 350.8242 293.4438 351.0298 c293.4438 359.0415 L291.0303 359.0415 L290.9019 359.0415 290.8247 359.0288 290.6963 358.9902 c290.4907 358.9521 290.3623 358.8877 290.1953 358.7852 c290.4009 359.7739 L297.604 359.7739 L297.6943 358.8364 l297.54 358.9136 297.4243 358.9521 297.2573 358.9902 cb*U*u304.2407 350.1694 m300.3887 355.1768 L300.2861 355.3052 300.2476 355.3955 300.1318 355.4849 c300.0806 355.5366 300.0293 355.562 299.9653 355.6006 c299.9653 351.1963 L299.9653 350.9912 299.9521 350.8755 300.0034 350.6704 c300.0293 350.4902 300.0806 350.3877 300.145 350.208 c298.7324 350.208 L298.8096 350.3618 298.8735 350.4521 298.8867 350.606 c298.9248 350.7988 298.9248 351.2222 298.9248 351.582 c298.9248 358.4639 L298.9248 358.8237 298.9121 359.0288 298.8481 359.3882 c298.8096 359.5552 298.7451 359.645 298.6685 359.7866 c301.5571 359.7866 L302.8154 359.7866 303.9453 358.9521 303.9067 357.5781 c303.8813 356.2427 302.7129 355.1001 301.3003 355.3184 c301.3774 355.2539 301.416 355.2026 301.4932 355.1387 c301.7627 354.8818 301.917 354.7148 302.1606 354.4063 c304.4463 351.5049 L304.7417 351.1196 304.9727 350.8115 305.2681 350.5547 c305.4478 350.4004 305.5635 350.3105 305.7559 350.1694 C304.2407 350.1694 lb1 D300.9922 359.2085 m300.5942 359.2085 300.3501 359.1958 299.978 359.0288 c299.978 355.7163 L300.1577 355.6904 300.5044 355.6777 300.8125 355.6904 c302.1353 355.793 302.9312 356.4868 302.854 357.5522 c302.8027 358.3228 302.5459 359.1445 300.9922 359.2085 cb*U*u0 D312.1719 350.1953 m306.6377 350.1953 L306.7275 350.3232 306.7661 350.4131 306.8047 350.5547 c306.856 350.7344 306.8301 350.8628 306.8301 351.0425 c306.8301 359.0801 L306.8301 359.2471 306.8047 359.3496 306.7534 359.4912 c306.7021 359.6064 306.6636 359.6709 306.5732 359.7607 c311.4653 359.7607 L311.4653 358.7979 L311.3501 358.9136 311.2471 358.9775 311.0933 359.0288 c310.875 359.106 310.7207 359.0674 310.5024 359.0674 c307.896 359.0674 L307.896 355.9087 L311.4653 355.9087 L311.4653 354.9971 L311.2729 355.0869 311.1445 355.1255 310.9263 355.1768 c310.772 355.2026 310.6567 355.2026 310.5024 355.2026 c307.9346 355.2026 L307.9346 350.9141 L311.0029 350.9141 L311.4268 350.9141 311.6709 350.9395 312.0688 351.0684 c312.2485 351.1196 312.3516 351.1709 312.5054 351.2739 C312.1719 350.1953 lb*U*u320.665 355.2153 m320.4468 355.2285 320.3184 355.2153 320.1128 355.2153 c317.5449 355.2153 L317.5449 351.71 L317.5449 351.2354 317.5576 351.0298 317.6221 350.4648 c317.6348 350.3364 317.686 350.2979 317.7119 350.1821 c316.312 350.1821 L316.3892 350.3232 316.4277 350.4131 316.4663 350.5547 c316.5049 350.7344 316.479 350.8628 316.479 351.0552 c316.479 359.0933 L316.479 359.2471 316.4536 359.3496 316.4019 359.4912 c316.3633 359.6064 316.312 359.6836 316.248 359.7739 c321.0889 359.7739 L321.0889 358.8105 L320.96 358.9136 320.8833 358.9775 320.729 359.0288 c320.5239 359.0801 320.3564 359.0674 320.1128 359.0674 c317.5063 359.0674 L317.5063 355.9214 L321.1016 355.9214 L321.1016 355.1387 l320.9346 355.1768 320.832 355.2153 320.665 355.2153 cb*U*u327.0039 350.1821 m324.3594 350.272 322.2148 352.4292 322.2148 355.0869 c322.2148 357.7964 324.4746 360.0562 327.2227 359.979 c329.9575 359.8765 331.9478 357.7451 331.999 355.1128 c332.0503 352.2363 329.7266 350.1182 327.0039 350.1821 cb1 D327.1455 359.1958 m324.8472 359.2217 323.3447 357.2954 323.3066 355.1387 c323.2676 352.9814 324.7959 351.0298 327.0298 350.9785 c329.251 350.9268 330.959 352.917 330.959 355.1128 c330.9336 357.2827 329.3926 359.1572 327.1455 359.1958 cb*U*u0 D338.561 350.1694 m334.709 355.1768 L334.6064 355.3052 334.5679 355.3955 334.4521 355.4849 c334.4009 355.5366 334.3496 355.562 334.2852 355.6006 c334.2852 351.1963 L334.2852 350.9912 334.2725 350.8755 334.3237 350.6704 c334.3496 350.4902 334.4009 350.3877 334.4648 350.208 c333.0527 350.208 L333.1299 350.3618 333.1938 350.4521 333.2065 350.606 c333.2451 350.7988 333.2451 351.2222 333.2451 351.582 c333.2451 358.4639 L333.2451 358.8237 333.2324 359.0288 333.168 359.3882 c333.1299 359.5552 333.0654 359.645 332.9883 359.7866 c335.8774 359.7866 L337.1357 359.7866 338.2656 358.9521 338.2271 357.5781 c338.2017 356.2427 337.0332 355.1001 335.6206 355.3184 c335.6978 355.2539 335.7363 355.2026 335.813 355.1387 c336.083 354.8818 336.2368 354.7148 336.481 354.4063 c338.7666 351.5049 L339.0615 351.1196 339.293 350.8115 339.5884 350.5547 c339.7681 350.4004 339.8838 350.3105 340.0762 350.1694 C338.561 350.1694 lb1 D335.3125 359.2085 m334.9146 359.2085 334.6704 359.1958 334.2979 359.0288 c334.2979 355.7163 L334.478 355.6904 334.8247 355.6777 335.1328 355.6904 c336.4551 355.793 337.2515 356.4868 337.1743 357.5522 c337.123 358.3228 336.8662 359.1445 335.3125 359.2085 cb*U*u0 D248.1548 333.4932 m248.2319 333.6855 248.2446 333.8145 248.2188 333.9941 c248.2061 334.1484 248.1421 334.2383 248.0903 334.3794 c246.8579 337.1782 L242.8516 337.1782 L241.5806 334.0713 L241.542 333.9814 241.5039 333.9043 241.4907 333.8145 c241.4653 333.6987 241.478 333.6216 241.5166 333.4932 c240.1426 333.4932 L240.271 333.6216 240.3481 333.6855 240.4507 333.8271 c240.6689 334.1099 240.7588 334.2637 240.8872 334.5718 c244.2256 342.353 L244.2773 342.4688 244.2773 342.5713 244.2773 342.7124 c244.29 342.8667 244.2773 342.9565 244.2515 343.1104 c245.4072 343.1104 L248.8608 335.2266 L249.0791 334.7261 249.2075 334.4307 249.4902 333.9814 c249.6182 333.7886 249.7085 333.6855 249.8496 333.4932 C248.1548 333.4932 lb1 D244.8164 341.8779 m243.1343 337.8462 L246.5752 337.8462 L244.8164 341.8779 lb*U*u0 D252.9214 333.3394 m252.0869 333.3521 251.5601 333.3262 250.7769 333.6216 c250.7769 334.6362 L251.4834 334.0586 252.1123 333.9941 253.0239 333.9814 c254.5391 333.9302 255.4634 334.6104 255.4634 335.8047 c255.4634 336.7163 254.7832 337.1914 253.9868 337.6406 c252.2407 338.6421 L251.3032 339.1943 250.7515 339.8232 250.7383 340.8506 c250.7256 342.3657 252.2153 343.2646 253.833 343.2134 c254.5903 343.1875 255.0654 343.2134 255.7588 342.9307 c255.7588 341.9419 L255.2197 342.4556 254.6802 342.5713 253.9355 342.5967 c252.8828 342.6611 251.7271 341.9546 251.8169 340.9023 c251.8813 340.2217 252.3433 339.8491 252.9468 339.5024 c254.4751 338.6167 L255.6304 337.9487 256.5933 337.5894 256.6577 335.9585 c256.7349 333.8398 254.6548 333.3008 252.9214 333.3394 cb*U*u263.8892 342.3018 m263.6836 342.3657 263.5425 342.3911 263.3242 342.3911 c261.2314 342.3911 L261.2314 334.3667 L261.2314 334.1738 261.2183 334.2124 261.2827 333.853 c261.2954 333.7246 261.3467 333.6343 261.4238 333.5059 c259.9346 333.5059 L259.9985 333.6216 260.0244 333.6987 260.063 333.8145 c260.1011 334.0068 260.0757 334.1353 260.0757 334.3408 c260.0757 342.353 L257.6616 342.353 L257.5332 342.353 257.4561 342.3398 257.3281 342.3018 c257.1226 342.2627 256.9941 342.1987 256.8271 342.0962 c257.0322 343.085 L264.2358 343.085 L264.3257 342.1475 l264.1714 342.2246 264.0557 342.2627 263.8892 342.3018 cb*U*u270.8721 333.4805 m267.02 338.4883 L266.9175 338.6167 266.8789 338.7061 266.7632 338.7964 c266.7119 338.8477 266.6606 338.873 266.5967 338.9116 c266.5967 334.5078 L266.5967 334.3022 266.5835 334.187 266.6353 333.9814 c266.6606 333.8018 266.7119 333.6987 266.7764 333.519 c265.3638 333.519 L265.4409 333.6729 265.5049 333.7632 265.5181 333.917 c265.5566 334.1099 265.5566 334.5332 265.5566 334.8926 c265.5566 341.7749 L265.5566 342.1343 265.5435 342.3398 265.4795 342.6997 c265.4409 342.8667 265.3765 342.9565 265.2998 343.0977 c268.1885 343.0977 L269.4468 343.0977 270.5767 342.2627 270.5386 340.8892 c270.5127 339.5537 269.3442 338.4111 267.9316 338.6294 c268.0088 338.5649 268.0474 338.5137 268.1245 338.4497 c268.394 338.1929 268.5483 338.0259 268.792 337.7178 c271.0776 334.8159 L271.373 334.4307 271.604 334.1226 271.8994 333.8657 c272.0791 333.7119 272.1948 333.6216 272.3872 333.4805 C270.8721 333.4805 lb1 D267.6235 342.52 m267.2256 342.52 266.9819 342.5073 266.6094 342.3398 c266.6094 339.0273 L266.7891 339.002 267.1357 338.9888 267.4438 339.002 c268.7666 339.1045 269.5625 339.7979 269.4854 340.8633 c269.4341 341.6338 269.1772 342.4556 267.6235 342.52 cb*U*u0 D276.6968 333.4932 m274.0522 333.5835 271.9077 335.7402 271.9077 338.3979 c271.9077 341.1074 274.1675 343.3672 276.9155 343.29 c279.6504 343.1875 281.6406 341.0562 281.6919 338.4238 c281.7432 335.5479 279.4189 333.4292 276.6968 333.4932 cb1 D276.8384 342.5073 m274.54 342.5327 273.0376 340.6064 272.999 338.4497 c272.9604 336.2925 274.4888 334.3408 276.7227 334.2896 c278.9443 334.2383 280.6519 336.228 280.6519 338.4238 c280.626 340.5938 279.0854 342.4688 276.8384 342.5073 cb*U*u0 D285.4678 338.0132 m284.8125 338.0386 284.4019 338.103 283.8496 338.4365 c283.8496 334.4951 L283.8496 334.2896 283.8496 334.1611 283.8882 333.9688 c283.9268 333.7759 283.9648 333.6729 284.0425 333.4932 c282.5786 333.4932 L282.6812 333.6343 282.771 333.7246 282.8096 333.9043 c282.8354 334.084 282.8354 334.3281 282.8354 334.585 c282.8354 342.1987 L282.8354 342.3911 282.8735 342.52 282.8223 342.6997 c282.771 342.8535 282.7197 342.9434 282.6172 343.085 c285.5059 343.085 L286.957 343.085 288.2666 342.019 288.228 340.5039 c288.1768 339.0659 287.085 337.9746 285.4678 338.0132 cb1 D285.0181 342.4429 m284.5688 342.4556 284.2734 342.4556 283.8496 342.3018 c283.8496 338.7705 L284.2607 338.5264 284.5688 338.4365 285.0308 338.4497 c286.3789 338.4883 287.2007 339.374 287.1621 340.5298 c287.124 341.7495 286.5586 342.3911 285.0181 342.4429 cb*U*u0 D295.3662 333.519 m295.4814 333.6602 295.52 333.7632 295.5586 333.9302 c295.5713 334.0454 295.5586 334.1226 295.5586 334.2637 c295.5586 338.5522 L290.3584 338.5522 L290.3584 334.6748 L290.3584 334.3281 290.3198 334.2383 290.4229 333.8018 c290.4614 333.6855 290.5254 333.6089 290.6025 333.4932 c289.126 333.4932 L289.2031 333.5962 289.2417 333.6602 289.293 333.7632 c289.3569 333.9429 289.3442 334.0713 289.3442 334.2637 c289.3442 342.1987 L289.3442 342.3911 289.3442 342.52 289.293 342.6997 c289.2285 342.8535 289.1772 342.9434 289.0747 343.085 c290.5771 343.085 L290.5 342.9565 290.4741 342.8794 290.4229 342.751 c290.333 342.4688 290.3457 342.2759 290.3457 341.9678 c290.3457 339.2588 L295.5586 339.2588 L295.5586 342.0962 L295.5586 342.3018 295.5845 342.4429 295.52 342.6353 c295.4688 342.8154 295.4048 342.9307 295.2764 343.0718 c296.7783 343.0718 L296.7144 342.9307 296.6758 342.8281 296.6372 342.6738 c296.5605 342.3657 296.5859 342.1602 296.5859 341.8394 c296.5859 334.3408 L296.5859 334.187 296.5986 334.0713 296.6372 333.9043 c296.6758 333.7632 296.7144 333.6602 296.7915 333.519 C295.3662 333.519 lb*U*u304.917 342.7378 m304.8018 342.584 304.7373 342.4814 304.6348 342.3145 c301.9897 338.3467 L301.9897 334.0967 L301.9897 333.9814 302.0024 333.9043 302.0283 333.7759 c302.0542 333.6729 302.0669 333.6089 302.1055 333.4932 c300.8599 333.4932 L300.9111 333.6089 300.937 333.6855 300.9497 333.7886 c300.9756 333.8784 300.9624 333.9429 300.9624 334.0454 c300.9624 338.3467 L298.356 342.4429 L298.2661 342.584 298.2148 342.6611 298.1123 342.8022 c298.0225 342.9048 297.958 342.9819 297.8296 343.085 c299.3706 343.085 L299.3574 342.9565 299.3706 342.8667 299.396 342.751 c299.4473 342.584 299.5117 342.4941 299.6016 342.353 c301.6045 339.1045 L303.7871 342.5586 L303.8516 342.6611 303.9028 342.7378 303.9287 342.8535 c303.9414 342.9434 303.9414 343.0078 303.9287 343.0977 c305.2383 343.0977 l305.0972 342.9692 305.02 342.8794 304.917 342.7378 cb*U*u307.7939 333.3394 m306.9595 333.3521 306.4331 333.3262 305.6494 333.6216 c305.6494 334.6362 L306.356 334.0586 306.9849 333.9941 307.8965 333.9814 c309.4116 333.9302 310.3364 334.6104 310.3364 335.8047 c310.3364 336.7163 309.6558 337.1914 308.8599 337.6406 c307.1133 338.6421 L306.1763 339.1943 305.624 339.8232 305.6113 340.8506 c305.5981 342.3657 307.0879 343.2646 308.7056 343.2134 c309.4629 343.1875 309.938 343.2134 310.6318 342.9307 c310.6318 341.9419 L310.0923 342.4556 309.5532 342.5713 308.8086 342.5967 c307.7554 342.6611 306.6001 341.9546 306.6895 340.9023 c306.7539 340.2217 307.2163 339.8491 307.8198 339.5024 c309.3477 338.6167 L310.5034 337.9487 311.4663 337.5894 311.5303 335.9585 c311.6074 333.8398 309.5273 333.3008 307.7939 333.3394 cb*U*u314.1138 342.6997 m314.0239 342.3911 314.0239 342.3018 314.0239 342.1602 c314.0239 335.1113 L314.0239 334.6235 314.0239 334.187 314.0625 333.8657 c314.0879 333.7119 314.165 333.6343 314.2422 333.5059 c312.7397 333.5059 L312.8169 333.6216 312.8555 333.6987 312.894 333.8271 c312.9712 334.0068 312.9712 334.1353 312.9712 334.3281 c312.9712 342.1343 L312.9712 342.3271 312.958 342.4429 312.894 342.6353 c312.8428 342.8022 312.7915 342.918 312.6885 343.0718 c314.2681 343.0718 l314.2036 342.9434 314.165 342.8408 314.1138 342.6997 cb*U*u323.2837 333.6729 m322.4365 333.3652 321.8843 333.3652 320.9727 333.3394 c317.7754 333.1982 315.4644 335.3809 315.4517 338.2441 c315.4385 341.1074 317.7754 343.2388 320.8701 343.2134 c321.7432 343.2002 322.3081 343.1489 323.1299 342.8022 c323.1299 341.8652 L322.3594 342.3018 321.7944 342.4556 320.8955 342.4688 c318.3145 342.52 316.5425 340.6064 316.5171 338.2441 c316.4785 335.7534 318.4434 334.0454 320.96 334.1099 c321.833 334.1226 322.8599 334.2896 323.7974 334.9443 C323.2837 333.6729 lb*U*u326.9644 333.3394 m326.1294 333.3521 325.6035 333.3262 324.8203 333.6216 c324.8203 334.6362 L325.5264 334.0586 326.1553 333.9941 327.0669 333.9814 c328.582 333.9302 329.5068 334.6104 329.5068 335.8047 c329.5068 336.7163 328.8262 337.1914 328.0303 337.6406 c326.2837 338.6421 L325.3467 339.1943 324.7944 339.8232 324.7813 340.8506 c324.7686 342.3657 326.2583 343.2646 327.876 343.2134 c328.6333 343.1875 329.1084 343.2134 329.8018 342.9307 c329.8018 341.9419 L329.2627 342.4556 328.7231 342.5713 327.9785 342.5967 c326.9258 342.6611 325.7705 341.9546 325.8604 340.9023 c325.9243 340.2217 326.3867 339.8491 326.9902 339.5024 c328.5181 338.6167 L329.6733 337.9487 330.6367 337.5894 330.7007 335.9585 c330.7778 333.8398 328.6978 333.3008 326.9644 333.3394 cb*U*u342.5347 333.4932 m342.6118 333.6855 342.6245 333.8145 342.5991 333.9941 c342.5859 334.1484 342.522 334.2383 342.4707 334.3794 c341.2378 337.1782 L337.2319 337.1782 L335.9609 334.0713 L335.9219 333.9814 335.8833 333.9043 335.8706 333.8145 c335.8452 333.6987 335.8579 333.6216 335.8965 333.4932 c334.5225 333.4932 L334.6509 333.6216 334.728 333.6855 334.8306 333.8271 c335.0488 334.1099 335.1387 334.2637 335.2671 334.5718 c338.6055 342.353 L338.6572 342.4688 338.6572 342.5713 338.6572 342.7124 c338.6699 342.8667 338.6572 342.9565 338.6313 343.1104 c339.7871 343.1104 L343.2407 335.2266 L343.459 334.7261 343.5874 334.4307 343.8701 333.9814 c343.9985 333.7886 344.0884 333.6855 344.2295 333.4932 C342.5347 333.4932 lb1 D339.1963 341.8779 m337.5142 337.8462 L340.9551 337.8462 L339.1963 341.8779 lb*U*u0 D353.978 342.6738 m353.9395 342.4688 353.9395 342.353 353.9395 342.1602 c353.9521 333.1851 L346.1968 341.7495 L346.1968 334.6235 L346.1968 334.3408 346.1968 334.3408 346.2871 333.917 c346.3125 333.7632 346.3511 333.6729 346.4023 333.5059 c345.1826 333.5059 L345.2725 333.6343 345.3237 333.7119 345.3496 333.853 c345.4009 334.0454 345.4009 334.1738 345.4009 334.3667 c345.4009 342.3789 L345.4009 342.5327 345.375 342.6484 345.2979 342.7896 c345.2339 342.9307 345.1567 343.0078 345.0288 343.085 c346.4409 343.085 L353.1563 335.4194 L353.1563 341.5054 L353.1563 341.9678 353.1816 342.2627 353.0918 342.7251 c353.0664 342.8667 353.0405 342.9565 353.002 343.0977 c354.0806 343.0977 l354.0293 342.9434 354.0034 342.8408 353.978 342.6738 cb*U*u358.6777 333.5059 m355.2236 333.5059 L355.3135 333.6987 355.3521 333.8398 355.3906 334.0454 c355.4292 334.2764 355.4292 334.4307 355.4292 334.6748 c355.4292 342.2246 L355.4292 342.4297 355.416 342.5586 355.3779 342.751 c355.3394 342.8667 355.3135 342.9434 355.249 343.0591 c358.729 343.0591 L361.6694 343.0591 363.6079 341.0176 363.6592 338.3853 c363.7109 335.6763 361.7334 333.5059 358.6777 333.5059 cb1 D358.3438 342.4297 m357.6377 342.4043 357.1753 342.4429 356.4946 342.2246 c356.4946 334.3281 L357.124 334.1738 357.5093 334.2124 358.1641 334.1997 c360.9375 334.1099 362.6577 335.9585 362.6577 338.3213 c362.645 340.6191 360.9375 342.52 358.3438 342.4297 cb*U*u0 D246.2144 316.6504 m245.3799 316.6631 244.853 316.6377 244.0703 316.9331 c244.0703 317.9473 L244.7764 317.3696 245.4053 317.3052 246.3169 317.2925 c247.832 317.2412 248.7568 317.9219 248.7568 319.1157 c248.7568 320.0273 248.0762 320.5024 247.2803 320.9521 c245.5337 321.9531 L244.5967 322.5054 244.0444 323.1348 244.0317 324.1616 c244.0186 325.6768 245.5083 326.5757 247.126 326.5244 c247.8838 326.4985 248.3584 326.5244 249.0518 326.2417 c249.0518 325.2534 L248.5127 325.7666 247.9731 325.8823 247.229 325.9082 c246.1758 325.9722 245.02 325.2661 245.1099 324.2134 c245.1743 323.5327 245.6367 323.1602 246.2402 322.8135 c247.7681 321.9277 L248.9238 321.2598 249.8867 320.9004 249.9507 319.27 c250.0278 317.1514 247.9478 316.6118 246.2144 316.6504 cb*U*u258.415 325.9722 m258.3892 325.7925 258.4019 325.6899 258.4019 325.5098 c258.4019 319.8989 L258.4019 318.0503 256.8228 316.7017 254.8452 316.6631 c252.7266 316.6377 251.0059 317.9985 251.0059 319.9502 c251.0059 325.4585 L251.0059 325.6255 251.019 325.7285 250.9932 325.895 c250.9678 326.1006 250.9419 326.2163 250.8779 326.396 c252.1875 326.396 L252.1235 326.2544 252.0977 326.165 252.0718 325.998 c252.0337 325.8311 252.0464 325.7153 252.0464 325.5483 c252.0464 320.0659 L252.0464 318.5894 253.3687 317.4463 254.8452 317.498 c256.3091 317.5366 257.3364 318.6279 257.3364 319.9888 c257.3364 325.4844 L257.3364 325.6768 257.3364 325.7925 257.3105 325.9722 c257.272 326.1392 257.2466 326.2417 257.1821 326.396 c258.5176 326.396 l258.4663 326.2417 258.4404 326.1392 258.415 325.9722 cb*U*u262.4814 321.3242 m261.8267 321.3496 261.416 321.4141 260.8638 321.748 c260.8638 317.8057 L260.8638 317.6006 260.8638 317.4722 260.9023 317.2798 c260.9409 317.0869 260.9795 316.9844 261.0562 316.8047 c259.5928 316.8047 L259.6953 316.9458 259.7852 317.0356 259.8237 317.2153 c259.8496 317.395 259.8496 317.6392 259.8496 317.896 c259.8496 325.5098 L259.8496 325.7026 259.8882 325.8311 259.8364 326.0107 c259.7852 326.165 259.7339 326.2544 259.6313 326.396 c262.52 326.396 L263.9707 326.396 265.2808 325.3301 265.2422 323.8149 c265.1909 322.377 264.0991 321.2856 262.4814 321.3242 cb1 D262.0322 325.7539 m261.583 325.7666 261.2876 325.7666 260.8638 325.6128 c260.8638 322.0815 L261.2749 321.8379 261.583 321.748 262.0449 321.7607 c263.3931 321.7993 264.2148 322.6855 264.1763 323.8408 c264.1377 325.0605 263.5728 325.7026 262.0322 325.7539 cb*U*u0 D271.5967 316.8174 m266.063 316.8174 L266.1528 316.9458 266.1914 317.0356 266.23 317.1768 c266.2813 317.3564 266.2554 317.4849 266.2554 317.665 c266.2554 325.7026 L266.2554 325.8696 266.23 325.9722 266.1782 326.1133 c266.127 326.229 266.0884 326.293 265.9985 326.3828 c270.8906 326.3828 L270.8906 325.4204 L270.7749 325.5356 270.6724 325.6001 270.5186 325.6514 c270.3003 325.7285 270.146 325.6899 269.9277 325.6899 c267.3213 325.6899 L267.3213 322.5313 L270.8906 322.5313 L270.8906 321.6191 L270.6982 321.7095 270.5698 321.748 270.3516 321.7993 c270.1973 321.8247 270.082 321.8247 269.9277 321.8247 c267.3599 321.8247 L267.3599 317.5366 L270.4287 317.5366 L270.8521 317.5366 271.0962 317.562 271.4941 317.6904 c271.6738 317.7417 271.7769 317.793 271.9307 317.896 C271.5967 316.8174 lb*U*u278.4541 316.7915 m274.6016 321.7993 L274.499 321.9277 274.4604 322.0176 274.3447 322.1074 c274.2935 322.1587 274.2422 322.1846 274.1782 322.2231 c274.1782 317.8188 L274.1782 317.6133 274.165 317.498 274.2168 317.2925 c274.2422 317.1128 274.2935 317.0098 274.3579 316.8301 c272.9453 316.8301 L273.0225 316.9844 273.0864 317.0742 273.0996 317.228 c273.1382 317.4209 273.1382 317.8447 273.1382 318.2041 c273.1382 325.0864 L273.1382 325.4458 273.125 325.6514 273.061 326.0107 c273.0225 326.1777 272.958 326.2676 272.8813 326.4087 c275.7705 326.4087 L277.0288 326.4087 278.1582 325.5742 278.1201 324.2002 c278.0942 322.8647 276.9258 321.7222 275.5137 321.9404 c275.5903 321.8765 275.6289 321.8247 275.7061 321.7607 c275.9756 321.5039 276.1299 321.3369 276.3735 321.0288 c278.6592 318.127 L278.9546 317.7417 279.1855 317.4336 279.481 317.1768 c279.6606 317.0229 279.7764 316.9331 279.9688 316.7915 C278.4541 316.7915 lb1 D275.2056 325.8311 m274.8071 325.8311 274.5635 325.8179 274.1909 325.6514 c274.1909 322.3384 L274.3706 322.313 274.7173 322.2998 275.0254 322.313 c276.3481 322.4155 277.144 323.1089 277.0669 324.1748 c277.0156 324.9453 276.7588 325.7666 275.2056 325.8311 cb*U*u0 D287.4375 316.9844 m286.5898 316.6763 286.0381 316.6763 285.126 316.6504 c281.9292 316.5093 279.6177 318.6919 279.605 321.5552 c279.5923 324.4185 281.9292 326.5503 285.0234 326.5244 c285.8965 326.5117 286.4614 326.46 287.2832 326.1133 c287.2832 325.1758 L286.5127 325.6128 285.9482 325.7666 285.0493 325.7798 c282.4683 325.8311 280.6963 323.918 280.6709 321.5552 c280.6323 319.0645 282.5967 317.3564 285.1133 317.4209 c285.9863 317.4336 287.0137 317.6006 287.9512 318.2554 C287.4375 316.9844 lb*U*u293.0825 316.8047 m290.4375 316.8945 288.293 319.0518 288.293 321.7095 c288.293 324.4185 290.5527 326.6787 293.3008 326.6011 c296.0356 326.4985 298.0254 324.3672 298.0771 321.7354 c298.1284 318.8589 295.8042 316.7402 293.0825 316.8047 cb1 D293.2236 325.8179 m290.9253 325.8438 289.4229 323.918 289.3843 321.7607 c289.3462 319.6035 290.874 317.6519 293.1079 317.6006 c295.3291 317.5493 297.0371 319.5391 297.0371 321.7354 c297.0112 323.9048 295.4707 325.7798 293.2236 325.8179 cb*U*u0 D308.9917 316.8174 m309.0176 316.9458 309.0303 317.0356 309.043 317.1641 c309.0688 317.395 309.043 317.5366 309.0176 317.7676 c308.2217 325.3301 L304.4722 316.4707 L300.646 324.9966 L300.145 317.8701 L300.1323 317.6006 300.1191 317.6006 300.1836 317.1641 c300.1963 317.0356 300.2095 316.9585 300.2476 316.8174 c299.0791 316.8174 L299.1563 316.9331 299.2075 316.9971 299.2461 317.1128 c299.3105 317.2925 299.2974 317.4336 299.3232 317.626 c300.0039 325.5098 L300.0166 325.6899 300.0552 325.8311 300.0039 325.998 c299.9653 326.1777 299.9141 326.2676 299.7856 326.396 c301.0825 326.396 L304.5493 318.4736 L307.8745 326.4087 L309.3643 326.4087 L309.313 326.3188 309.2871 326.2676 309.2485 326.1777 c309.146 325.9082 309.146 325.7285 309.1846 325.4458 c309.9805 318.4351 L310.019 317.9727 310.0449 317.6392 310.1216 317.2153 c310.1475 317.0615 310.25 316.9585 310.3398 316.8174 C308.9917 316.8174 lb*U*u314.2314 321.3242 m313.5767 321.3496 313.1655 321.4141 312.6138 321.748 c312.6138 317.8057 L312.6138 317.6006 312.6138 317.4722 312.6519 317.2798 c312.6904 317.0869 312.729 316.9844 312.8062 316.8047 c311.3423 316.8047 L311.4448 316.9458 311.5352 317.0356 311.5732 317.2153 c311.5991 317.395 311.5991 317.6392 311.5991 317.896 c311.5991 325.5098 L311.5991 325.7026 311.6377 325.8311 311.5864 326.0107 c311.5352 326.165 311.4834 326.2544 311.3809 326.396 c314.27 326.396 L315.7207 326.396 317.0303 325.3301 316.9922 323.8149 c316.9409 322.377 315.8491 321.2856 314.2314 321.3242 cb1 D313.7817 325.7539 m313.3325 325.7666 313.0371 325.7666 312.6138 325.6128 c312.6138 322.0815 L313.0244 321.8379 313.3325 321.748 313.7949 321.7607 c315.1431 321.7993 315.9648 322.6855 315.9263 323.8408 c315.8877 325.0605 315.3228 325.7026 313.7817 325.7539 cb*U*u0 D325.3755 325.9722 m325.3496 325.7925 325.3623 325.6899 325.3623 325.5098 c325.3623 319.8989 L325.3623 318.0503 323.7832 316.7017 321.8057 316.6631 c319.6875 316.6377 317.9668 317.9985 317.9668 319.9502 c317.9668 325.4585 L317.9668 325.6255 317.9795 325.7285 317.9541 325.895 c317.9282 326.1006 317.9028 326.2163 317.8384 326.396 c319.1479 326.396 L319.084 326.2544 319.0581 326.165 319.0327 325.998 c318.9941 325.8311 319.0068 325.7153 319.0068 325.5483 c319.0068 320.0659 L319.0068 318.5894 320.3296 317.4463 321.8057 317.498 c323.2695 317.5366 324.2969 318.6279 324.2969 319.9888 c324.2969 325.4844 L324.2969 325.6768 324.2969 325.7925 324.271 325.9722 c324.2329 326.1392 324.207 326.2417 324.1426 326.396 c325.478 326.396 l325.4268 326.2417 325.4009 326.1392 325.3755 325.9722 cb*U*u333.5122 325.6128 m333.3071 325.6768 333.166 325.7026 332.9473 325.7026 c330.8545 325.7026 L330.8545 317.6777 L330.8545 317.4849 330.8418 317.5234 330.9058 317.1641 c330.9189 317.0356 330.9702 316.9458 331.0474 316.8174 c329.5576 316.8174 L329.6221 316.9331 329.6475 317.0098 329.686 317.1255 c329.7246 317.3179 329.6987 317.4463 329.6987 317.6519 c329.6987 325.6641 L327.2852 325.6641 L327.1567 325.6641 327.0796 325.6514 326.9512 325.6128 c326.7456 325.5742 326.6172 325.5098 326.4507 325.4072 c326.6558 326.396 L333.8589 326.396 L333.9492 325.4585 l333.7949 325.5356 333.6792 325.5742 333.5122 325.6128 cb*U*u336.5537 326.0107 m336.4639 325.7026 336.4639 325.6128 336.4639 325.4717 c336.4639 318.4224 L336.4639 317.9341 336.4639 317.498 336.5024 317.1768 c336.5283 317.0229 336.6055 316.9458 336.6821 316.8174 c335.1802 316.8174 L335.2568 316.9331 335.2954 317.0098 335.334 317.1382 c335.4111 317.3179 335.4111 317.4463 335.4111 317.6392 c335.4111 325.4458 L335.4111 325.6382 335.3984 325.7539 335.334 325.9463 c335.2827 326.1133 335.2314 326.229 335.1284 326.3828 c336.708 326.3828 l336.6436 326.2544 336.6055 326.1519 336.5537 326.0107 cb*U*u346.8921 325.9849 m346.854 325.7798 346.854 325.6641 346.854 325.4717 c346.8667 316.4966 L339.1113 325.0605 L339.1113 317.9341 L339.1113 317.6519 339.1113 317.6519 339.2012 317.228 c339.2266 317.0742 339.2651 316.9844 339.3169 316.8174 c338.0972 316.8174 L338.187 316.9458 338.2383 317.0229 338.2637 317.1641 c338.3154 317.3564 338.3154 317.4849 338.3154 317.6777 c338.3154 325.6899 L338.3154 325.8438 338.2896 325.9595 338.2124 326.1006 c338.1484 326.2417 338.0713 326.3188 337.9429 326.396 c339.355 326.396 L346.0703 318.7305 L346.0703 324.8169 L346.0703 325.2788 346.0962 325.5742 346.0063 326.0366 c345.9805 326.1777 345.9551 326.2676 345.9165 326.4087 c346.9951 326.4087 l346.9438 326.2544 346.918 326.1519 346.8921 325.9849 cb*U*u356.7021 321.2344 m356.6509 321.0928 356.6636 320.9902 356.6636 320.8364 c356.6768 317.6392 L355.9961 317.1895 354.7632 316.7402 353.4795 316.689 c350.4106 316.5605 347.9966 318.769 348.0352 321.5684 c348.0869 324.7266 350.3076 326.5371 353.248 326.5117 c354.2241 326.4985 354.8403 326.46 355.7393 326.1133 c355.7393 325.125 L354.8276 325.6768 353.8643 325.7539 353.0557 325.7539 c350.3462 325.7153 349.0239 323.6099 349.0752 321.5811 c349.1523 319.2056 351.0015 317.4209 353.5176 317.5366 c354.3267 317.5747 354.9302 317.7031 355.688 318.1396 c355.688 319.9761 L355.688 320.3999 355.7134 320.708 355.585 321.106 c355.521 321.311 355.4307 321.4141 355.29 321.5684 c356.8818 321.5684 l356.792 321.4526 356.7407 321.3755 356.7021 321.2344 cb*UULB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAGM_Gradient /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF